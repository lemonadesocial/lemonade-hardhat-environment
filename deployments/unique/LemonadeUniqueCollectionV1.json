{
  "address": "0xB2D819bA6d837BD2e1c2856Ed2109395747821F6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collectionHelpers",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenPrefix",
          "type": "string"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "collection",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "mintToCaller",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "value",
              "type": "uint96"
            }
          ],
          "internalType": "struct LibPart.Part[]",
          "name": "royalties",
          "type": "tuple[]"
        }
      ],
      "name": "mintToCallerWithRoyalty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x30f07578a7483835258f6faafb769aa653ef703b16a768faaaf648443fe7fce6",
  "receipt": {
    "to": null,
    "from": "0x951292004e8a18955Cb1095CB72Ca6B01d68336E",
    "contractAddress": "0xB2D819bA6d837BD2e1c2856Ed2109395747821F6",
    "transactionIndex": 0,
    "gasUsed": "868708",
    "logsBloom": "0x
    "blockHash": "0x0afa90d0321b3cdcdef2e6e6d54f1b854cd67e3014bc78f2d23e623330f72bcb",
    "transactionHash": "0x30f07578a7483835258f6faafb769aa653ef703b16a768faaaf648443fe7fce6",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2277452,
        "transactionHash": "0x30f07578a7483835258f6faafb769aa653ef703b16a768faaaf648443fe7fce6",
        "address": "0x6C4E9fE1AE37a41E93CEE429e8E1881aBdcbb54F",
        "topics": [
          "0x5d0de243db1669e3a7056744cd715c625f0c1c348736c2c2d53d0ddebff1a6c7",
          "0x000000000000000000000000b2d819ba6d837bd2e1c2856ed2109395747821f6",
          "0x00000000000000000000000017c4e6453cc49aaaaeaca894e6d9683e00000037"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0afa90d0321b3cdcdef2e6e6d54f1b854cd67e3014bc78f2d23e623330f72bcb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 2277452,
        "transactionHash": "0x30f07578a7483835258f6faafb769aa653ef703b16a768faaaf648443fe7fce6",
        "address": "0x6C4E9fE1AE37a41E93CEE429e8E1881aBdcbb54F",
        "topics": [
          "0xb010dc1cb2e2db87251608450c4026347f536b0e324a6ee566a5559d6d4f9a3b",
          "0x00000000000000000000000017c4e6453cc49aaaaeaca894e6d9683e00000037"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x0afa90d0321b3cdcdef2e6e6d54f1b854cd67e3014bc78f2d23e623330f72bcb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 2277452,
        "transactionHash": "0x30f07578a7483835258f6faafb769aa653ef703b16a768faaaf648443fe7fce6",
        "address": "0x6C4E9fE1AE37a41E93CEE429e8E1881aBdcbb54F",
        "topics": [
          "0xb010dc1cb2e2db87251608450c4026347f536b0e324a6ee566a5559d6d4f9a3b",
          "0x00000000000000000000000017c4e6453cc49aaaaeaca894e6d9683e00000037"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x0afa90d0321b3cdcdef2e6e6d54f1b854cd67e3014bc78f2d23e623330f72bcb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 2277452,
        "transactionHash": "0x30f07578a7483835258f6faafb769aa653ef703b16a768faaaf648443fe7fce6",
        "address": "0x6C4E9fE1AE37a41E93CEE429e8E1881aBdcbb54F",
        "topics": [
          "0xb010dc1cb2e2db87251608450c4026347f536b0e324a6ee566a5559d6d4f9a3b",
          "0x00000000000000000000000017c4e6453cc49aaaaeaca894e6d9683e00000037"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x0afa90d0321b3cdcdef2e6e6d54f1b854cd67e3014bc78f2d23e623330f72bcb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 2277452,
        "transactionHash": "0x30f07578a7483835258f6faafb769aa653ef703b16a768faaaf648443fe7fce6",
        "address": "0x6C4E9fE1AE37a41E93CEE429e8E1881aBdcbb54F",
        "topics": [
          "0xb010dc1cb2e2db87251608450c4026347f536b0e324a6ee566a5559d6d4f9a3b",
          "0x00000000000000000000000017c4e6453cc49aaaaeaca894e6d9683e00000037"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x0afa90d0321b3cdcdef2e6e6d54f1b854cd67e3014bc78f2d23e623330f72bcb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 2277452,
        "transactionHash": "0x30f07578a7483835258f6faafb769aa653ef703b16a768faaaf648443fe7fce6",
        "address": "0x6C4E9fE1AE37a41E93CEE429e8E1881aBdcbb54F",
        "topics": [
          "0xb010dc1cb2e2db87251608450c4026347f536b0e324a6ee566a5559d6d4f9a3b",
          "0x00000000000000000000000017c4e6453cc49aaaaeaca894e6d9683e00000037"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x0afa90d0321b3cdcdef2e6e6d54f1b854cd67e3014bc78f2d23e623330f72bcb"
      }
    ],
    "blockNumber": 2277452,
    "cumulativeGasUsed": "868708",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6c4e9fe1ae37a41e93cee429e8e1881abdcbb54f",
    "Non-Fungible Lemon",
    "Non-Fungible Lemon",
    "NFL"
  ],
  "numDeployments": 1,
  "solcInputHash": "b1e397fd93dae4e1be96c59cbf27f071",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collectionHelpers\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenPrefix\",\"type\":\"string\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"collection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mintToCaller\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"internalType\":\"struct LibPart.Part[]\",\"name\":\"royalties\",\"type\":\"tuple[]\"}],\"name\":\"mintToCallerWithRoyalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LemonadeUniqueCollectionV1.sol\":\"LemonadeUniqueCollectionV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ERC721LemonadeV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./rarible/LibPart.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nbytes4 constant ERC2981_INTERFACE_ID = 0x2a55205a;\\nbytes4 constant RaribleRoyaltiesV2_INTERFACE_ID = 0xcad96cca;\\n\\ninterface IMintable {\\n    function mintToCaller(string memory tokenURI) external returns (uint256);\\n\\n    function mintToCallerWithRoyalty(\\n        string memory tokenURI,\\n        LibPart.Part[] memory royalties\\n    ) external returns (uint256);\\n}\\n\\ncontract ERC721LemonadeV1 is ERC721, Ownable, IMintable {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter public tokenIdTracker;\\n\\n    mapping(uint256 => string) public tokenURIs;\\n    mapping(uint256 => LibPart.Part[]) public royalties;\\n\\n    constructor(string memory name, string memory symbol)\\n        ERC721(name, symbol)\\n    {}\\n\\n    function mintToCaller(string memory tokenURI_)\\n        public\\n        override\\n        returns (uint256)\\n    {\\n        uint256 tokenId = tokenIdTracker.current();\\n\\n        _mint(_msgSender(), tokenId);\\n        tokenURIs[tokenId] = tokenURI_;\\n\\n        tokenIdTracker.increment();\\n\\n        return tokenId;\\n    }\\n\\n    function mintToCallerWithRoyalty(\\n        string memory tokenURI_,\\n        LibPart.Part[] memory royalties_\\n    ) public override returns (uint256) {\\n        uint256 tokenId = mintToCaller(tokenURI_);\\n\\n        uint256 length = royalties_.length;\\n        for (uint256 i; i < length; ) {\\n            royalties[tokenId].push(royalties_[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return tokenId;\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721Lemonade: URI query for nonexistent token\\\"\\n        );\\n\\n        return tokenURIs[tokenId];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == ERC2981_INTERFACE_ID ||\\n            interfaceId == RaribleRoyaltiesV2_INTERFACE_ID ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function getRaribleV2Royalties(uint256 tokenId)\\n        public\\n        view\\n        returns (LibPart.Part[] memory)\\n    {\\n        return royalties[tokenId];\\n    }\\n\\n    function royaltyInfo(uint256 tokenId, uint256 price)\\n        public\\n        view\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        uint256 length = royalties[tokenId].length;\\n\\n        if (length == 0) {\\n            return (address(0), 0);\\n        }\\n\\n        uint256 totalValue;\\n        for (uint256 i; i < length; i++) {\\n            totalValue += royalties[tokenId][i].value;\\n        }\\n        return (royalties[tokenId][0].account, (price * totalValue) / 10000);\\n    }\\n}\\n\",\"keccak256\":\"0x5777814f7763747a8370c9796568965b14b91b798283a57d034172f0575d9b9b\",\"license\":\"MIT\"},\"contracts/LemonadeUniqueCollectionV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC721LemonadeV1.sol\\\";\\nimport \\\"./unique/ICollection.sol\\\";\\nimport \\\"./unique/ICollectionHelpers.sol\\\";\\nimport \\\"./unique/LibPartAdapter.sol\\\";\\n\\ncontract LemonadeUniqueCollectionV1 is IMintable {\\n    address public collection;\\n\\n    constructor(\\n        address collectionHelpers,\\n        string memory name,\\n        string memory description,\\n        string memory tokenPrefix\\n    ) payable {\\n        ICollectionHelpers collectionHelpers_ = ICollectionHelpers(\\n            collectionHelpers\\n        );\\n\\n        collection = collectionHelpers_.createNFTCollection{value: msg.value}(\\n            name,\\n            description,\\n            tokenPrefix\\n        );\\n        collectionHelpers_.makeCollectionERC721MetadataCompatible(\\n            collection,\\n            \\\"\\\"\\n        );\\n\\n        ICollection collection_ = ICollection(collection);\\n\\n        collection_.addCollectionAdminCross(\\n            CrossAddress({eth: address(this), sub: 0})\\n        );\\n        collection_.changeCollectionOwnerCross(\\n            CrossAddress({eth: msg.sender, sub: 0})\\n        );\\n\\n        PropertyPermission[] memory permissions = new PropertyPermission[](3);\\n\\n        permissions[0] = PropertyPermission({\\n            code: TokenPermissionField.Mutable,\\n            value: false\\n        });\\n        permissions[1] = PropertyPermission({\\n            code: TokenPermissionField.CollectionAdmin,\\n            value: true\\n        });\\n        permissions[2] = PropertyPermission({\\n            code: TokenPermissionField.TokenOwner,\\n            value: false\\n        });\\n\\n        TokenPropertyPermission[]\\n            memory permissionsArray = new TokenPropertyPermission[](1);\\n\\n        permissionsArray[0] = TokenPropertyPermission({\\n            key: ROYALTIES_PROPERTY,\\n            permissions: permissions\\n        });\\n\\n        collection_.setTokenPropertyPermissions(permissionsArray);\\n    }\\n\\n    function mintToCaller(\\n        string memory tokenURI\\n    ) public override returns (uint256) {\\n        return ICollection(collection).mintWithTokenURI(msg.sender, tokenURI);\\n    }\\n\\n    function mintToCallerWithRoyalty(\\n        string memory tokenURI,\\n        LibPart.Part[] memory royalties\\n    ) public override returns (uint256) {\\n        uint256 tokenId = mintToCaller(tokenURI);\\n\\n        Property[] memory properties = new Property[](1);\\n\\n        properties[0] = Property({\\n            key: ROYALTIES_PROPERTY,\\n            value: LibPartAdapter.encode(royalties)\\n        });\\n\\n        ICollection(collection).setProperties(tokenId, properties);\\n\\n        return tokenId;\\n    }\\n}\\n\",\"keccak256\":\"0x46a0b73aab37bd85be3f520fd23fb6d07eaf86ef9377f9523da6572673efbec7\",\"license\":\"MIT\"},\"contracts/rarible/LibPart.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary LibPart {\\n    bytes32 public constant TYPE_HASH = keccak256(\\\"Part(address account,uint96 value)\\\");\\n\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n\\n    function hash(Part memory part) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\\n    }\\n}\\n\",\"keccak256\":\"0xf9fd0d768bdc8ca426790737f8548484573148dd5ed0365c31d98a06ecc0ed5b\",\"license\":\"MIT\"},\"contracts/unique/ICollection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nstring constant ROYALTIES_PROPERTY = \\\"royalties\\\";\\n\\nstruct Property {\\n    string key;\\n    bytes value;\\n}\\n\\nenum TokenPermissionField {\\n    Mutable,\\n    TokenOwner,\\n    CollectionAdmin\\n}\\n\\nstruct PropertyPermission {\\n    TokenPermissionField code;\\n    bool value;\\n}\\n\\nstruct TokenPropertyPermission {\\n    string key;\\n    PropertyPermission[] permissions;\\n}\\n\\nstruct CrossAddress {\\n    address eth;\\n    uint256 sub;\\n}\\n\\ninterface ICollection is IERC721 {\\n    function addCollectionAdminCross(CrossAddress memory newAdmin)\\n    external;\\n\\n    function changeCollectionOwnerCross(CrossAddress memory newOwner)\\n    external;\\n\\n    function mint(address to) external returns (uint256);\\n\\n    function mintWithTokenURI(address to, string memory tokenUri)\\n    external\\n    returns (uint256);\\n\\n    function setTokenPropertyPermissions(TokenPropertyPermission[] memory permissions)\\n    external;\\n\\n    function setProperties(uint256 tokenId, Property[] memory properties)\\n    external;\\n\\n    function property(uint256 tokenId, string memory key)\\n    external\\n    view\\n    returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x5a7f076acb50218253b4de3479575811a37f5c412e134af1cf5566ec591e0763\",\"license\":\"MIT\"},\"contracts/unique/ICollectionHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ICollectionHelpers {\\n    function createNFTCollection(\\n        string memory name,\\n        string memory description,\\n        string memory tokenPrefix\\n    ) external payable returns (address);\\n\\n    function makeCollectionERC721MetadataCompatible(\\n        address collection,\\n        string memory baseUri\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe690f957378d423761ac070018bfd2a8ec1fd5bebd654c1dbd27a0b9923e3286\",\"license\":\"MIT\"},\"contracts/unique/LibPartAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../rarible/LibPart.sol\\\";\\n\\nlibrary LibPartAdapter {\\n    function encode(LibPart.Part[] memory parts) internal pure returns (bytes memory) {\\n        if (parts.length == 0) return \\\"\\\";\\n\\n        uint256[] memory encoded = new uint256[](parts.length * 2);\\n\\n        for (uint i = 0; i < parts.length; i++) {\\n            encoded[i * 2] = 0x0100000000000000000000000000000000000000000000040000000000000000 | uint256(parts[i].value);\\n            encoded[i * 2 + 1] = uint256(uint160(address(parts[i].account)));\\n        }\\n\\n        return abi.encodePacked(encoded);\\n    }\\n\\n    function decode(bytes memory b) internal pure returns (LibPart.Part[] memory) {\\n        if (b.length == 0) return new LibPart.Part[](0);\\n\\n        require((b.length % (32 * 2)) == 0, \\\"Invalid bytes length, expected (32 * 2) * UniqueRoyaltyParts count\\\");\\n        uint partsCount = b.length / (32 * 2);\\n        uint numbersCount = partsCount * 2;\\n\\n        LibPart.Part[] memory parts = new LibPart.Part[](partsCount);\\n\\n        // need this because numbers encoded via abi.encodePacked\\n        bytes memory prefix = new bytes(64);\\n\\n        assembly {\\n            mstore(add(prefix, 32), 32)\\n            mstore(add(prefix, 64), numbersCount)\\n        }\\n\\n        uint256[] memory encoded = abi.decode(bytes.concat(prefix, b), (uint256[]));\\n\\n        for (uint i = 0; i < partsCount; i++) {\\n            uint96 value = uint96(encoded[i * 2] & 0xFFFFFFFFFFFFFFFF);\\n            address account = address(uint160(encoded[i * 2 + 1]));\\n\\n            parts[i] = LibPart.Part({\\n            account: payable(account),\\n            value: value\\n            });\\n        }\\n\\n        return parts;\\n    }\\n}\",\"keccak256\":\"0x600a30779f777abacf4f5ece446b2eba405163c155fc6d7d92aa2f0b1f140ad4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260405162000fa138038062000fa1833981016040819052620000269162000534565b6040516310895ecb60e31b815284906001600160a01b0382169063844af6589034906200005c90889088908890600401620006d9565b6020604051808303818588803b1580156200007657600080fd5b505af11580156200008b573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190620000b2919062000510565b600080546001600160a01b0319166001600160a01b039283169081178255604080516310ac484b60e31b815260048101929092526024820152604481019190915290821690638562425890606401600060405180830381600087803b1580156200011b57600080fd5b505af115801562000130573d6000803e3d6000fd5b5050600080546040805180820182523081526020810193845290516342cd53eb60e11b815290516001600160a01b039081166004830152925160248201529116925082915063859aa7d690604401600060405180830381600087803b1580156200019957600080fd5b505af1158015620001ae573d6000803e3d6000fd5b50506040805180820182523381526000602082019081529151636496c49760e01b815290516001600160a01b039081166004830152915160248201529084169250636496c4979150604401600060405180830381600087803b1580156200021457600080fd5b505af115801562000229573d6000803e3d6000fd5b5060009250600391506200023a9050565b6040519080825280602002602001820160405280156200028157816020015b6040805180820190915260008082526020820152815260200190600190039081620002595790505b506040805180820190915290915080600081526020016000151581525081600081518110620002c057634e487b7160e01b600052603260045260246000fd5b602090810291909101015260408051808201909152806002815260200160011515815250816001815181106200030657634e487b7160e01b600052603260045260246000fd5b602090810291909101015260408051808201909152806001815260200160001515815250816002815181106200034c57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152604080516001808252818301909252600091816020015b60408051808201909152606080825260208201528152602001906001900390816200036e57505060408051608081018252600991810191825268726f79616c7469657360b81b6060820152908152602081018490528151919250908290600090620003e957634e487b7160e01b600052603260045260246000fd5b6020908102919091010152604051635ec94c1d60e11b81526001600160a01b0384169063bd92983a906200042290849060040162000603565b600060405180830381600087803b1580156200043d57600080fd5b505af115801562000452573d6000803e3d6000fd5b50505050505050505050505062000761565b80516001600160a01b03811681146200047c57600080fd5b919050565b600082601f83011262000492578081fd5b81516001600160401b0380821115620004af57620004af6200074b565b604051601f8301601f19908116603f01168101908282118183101715620004da57620004da6200074b565b81604052838152866020858801011115620004f3578485fd5b6200050684602083016020890162000718565b9695505050505050565b60006020828403121562000522578081fd5b6200052d8262000464565b9392505050565b600080600080608085870312156200054a578283fd5b620005558562000464565b60208601519094506001600160401b038082111562000572578485fd5b620005808883890162000481565b9450604087015191508082111562000596578384fd5b620005a48883890162000481565b93506060870151915080821115620005ba578283fd5b50620005c98782880162000481565b91505092959194509250565b60008151808452620005ef81602086016020860162000718565b601f01601f19169290920160200192915050565b60006020808301818452808551808352604092508286019150828160051b870101848801865b83811015620006cb57888303603f19018552815180518785526200065088860182620005d5565b91890151858303868b01528051808452908a01928b92508a01905b80831015620006b55783518051600381106200069557634e487b7160e01b8e52602160045260248efd5b83528b015115158b830152928a019260019290920191908901906200066b565b5096890196945050509086019060010162000629565b509098975050505050505050565b606081526000620006ee6060830186620005d5565b8281036020840152620007028186620005d5565b90508281036040840152620005068185620005d5565b60005b83811015620007355781810151838201526020016200071b565b8381111562000745576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b61083080620007716000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063111fb47b1461004657806358b4c6bb1461006c5780637de1e5361461007f575b600080fd5b610059610054366004610483565b6100aa565b6040519081526020015b60405180910390f35b61005961007a3660046104be565b610135565b600054610092906001600160a01b031681565b6040516001600160a01b039091168152602001610063565b600080546040516322e0bbc160e11b81526001600160a01b03909116906345c17782906100dd9033908690600401610672565b602060405180830381600087803b1580156100f757600080fd5b505af115801561010b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012f91906105d9565b92915050565b600080610141846100aa565b60408051600180825281830190925291925060009190816020015b604080518082019091526060808252602082015281526020019060019003908161015c57505060408051608081018252600991810191825268726f79616c7469657360b81b6060820152908152909150602081016101b986610255565b815250816000815181106101dd57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152600054604051630a769d3760e11b81526001600160a01b03909116906314ed3a6e9061021a9085908590600401610696565b600060405180830381600087803b15801561023457600080fd5b505af1158015610248573d6000803e3d6000fd5b5093979650505050505050565b606081516000141561027557505060408051602081019091526000815290565b6000825160026102859190610794565b67ffffffffffffffff8111156102ab57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156102d4578160200160208202803683370190505b50905060005b83518110156103ef5783818151811061030357634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516bffffffffffffffffffffffff1668040000000000000000600160f81b01178282600261033c9190610794565b8151811061035a57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505083818151811061038657634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b0316828260026103a99190610794565b6103b490600161077c565b815181106103d257634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806103e7816107b3565b9150506102da565b5080604051602001610401919061063c565b604051602081830303815290604052915050919050565b600082601f830112610428578081fd5b813567ffffffffffffffff811115610442576104426107e4565b610455601f8201601f191660200161074b565b818152846020838601011115610469578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215610494578081fd5b813567ffffffffffffffff8111156104aa578182fd5b6104b684828501610418565b949350505050565b60008060408084860312156104d1578182fd5b833567ffffffffffffffff808211156104e8578384fd5b6104f487838801610418565b945060209150818601358181111561050a578485fd5b8601601f8101881361051a578485fd5b80358281111561052c5761052c6107e4565b61053a848260051b0161074b565b8181528481019350828501600683901b840186018b1015610559578788fd5b8793505b828410156105c85786818c031215610573578788fd5b61057b610722565b81356001600160a01b038116811461059157898afd5b8152818701356bffffffffffffffffffffffff811681146105b057898afd5b8188015285529385019360019390930192860161055d565b508096505050505050509250929050565b6000602082840312156105ea578081fd5b5051919050565b60008151808452815b81811015610616576020818501810151868301820152016105fa565b818111156106275782602083870101525b50601f01601f19169290920160200192915050565b815160009082906020808601845b838110156106665781518552938201939082019060010161064a565b50929695505050505050565b6001600160a01b03831681526040602082018190526000906104b6908301846105f1565b600060408083018584526020828186015281865180845260608701915060608160051b8801019350828801865b8281101561071357888603605f19018452815180518888526106e7898901826105f1565b91870151888303898901529190506106ff81836105f1565b9750505092840192908401906001016106c3565b50939998505050505050505050565b6040805190810167ffffffffffffffff81118282101715610745576107456107e4565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610774576107746107e4565b604052919050565b6000821982111561078f5761078f6107ce565b500190565b60008160001904831182151516156107ae576107ae6107ce565b500290565b60006000198214156107c7576107c76107ce565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122078526edbad77f077662813111710d487f46fe1ae1e79c55ef99b08f759f2d5f664736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063111fb47b1461004657806358b4c6bb1461006c5780637de1e5361461007f575b600080fd5b610059610054366004610483565b6100aa565b6040519081526020015b60405180910390f35b61005961007a3660046104be565b610135565b600054610092906001600160a01b031681565b6040516001600160a01b039091168152602001610063565b600080546040516322e0bbc160e11b81526001600160a01b03909116906345c17782906100dd9033908690600401610672565b602060405180830381600087803b1580156100f757600080fd5b505af115801561010b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012f91906105d9565b92915050565b600080610141846100aa565b60408051600180825281830190925291925060009190816020015b604080518082019091526060808252602082015281526020019060019003908161015c57505060408051608081018252600991810191825268726f79616c7469657360b81b6060820152908152909150602081016101b986610255565b815250816000815181106101dd57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152600054604051630a769d3760e11b81526001600160a01b03909116906314ed3a6e9061021a9085908590600401610696565b600060405180830381600087803b15801561023457600080fd5b505af1158015610248573d6000803e3d6000fd5b5093979650505050505050565b606081516000141561027557505060408051602081019091526000815290565b6000825160026102859190610794565b67ffffffffffffffff8111156102ab57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156102d4578160200160208202803683370190505b50905060005b83518110156103ef5783818151811061030357634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516bffffffffffffffffffffffff1668040000000000000000600160f81b01178282600261033c9190610794565b8151811061035a57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505083818151811061038657634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b0316828260026103a99190610794565b6103b490600161077c565b815181106103d257634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806103e7816107b3565b9150506102da565b5080604051602001610401919061063c565b604051602081830303815290604052915050919050565b600082601f830112610428578081fd5b813567ffffffffffffffff811115610442576104426107e4565b610455601f8201601f191660200161074b565b818152846020838601011115610469578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215610494578081fd5b813567ffffffffffffffff8111156104aa578182fd5b6104b684828501610418565b949350505050565b60008060408084860312156104d1578182fd5b833567ffffffffffffffff808211156104e8578384fd5b6104f487838801610418565b945060209150818601358181111561050a578485fd5b8601601f8101881361051a578485fd5b80358281111561052c5761052c6107e4565b61053a848260051b0161074b565b8181528481019350828501600683901b840186018b1015610559578788fd5b8793505b828410156105c85786818c031215610573578788fd5b61057b610722565b81356001600160a01b038116811461059157898afd5b8152818701356bffffffffffffffffffffffff811681146105b057898afd5b8188015285529385019360019390930192860161055d565b508096505050505050509250929050565b6000602082840312156105ea578081fd5b5051919050565b60008151808452815b81811015610616576020818501810151868301820152016105fa565b818111156106275782602083870101525b50601f01601f19169290920160200192915050565b815160009082906020808601845b838110156106665781518552938201939082019060010161064a565b50929695505050505050565b6001600160a01b03831681526040602082018190526000906104b6908301846105f1565b600060408083018584526020828186015281865180845260608701915060608160051b8801019350828801865b8281101561071357888603605f19018452815180518888526106e7898901826105f1565b91870151888303898901529190506106ff81836105f1565b9750505092840192908401906001016106c3565b50939998505050505050505050565b6040805190810167ffffffffffffffff81118282101715610745576107456107e4565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610774576107746107e4565b604052919050565b6000821982111561078f5761078f6107ce565b500190565b60008160001904831182151516156107ae576107ae6107ce565b500290565b60006000198214156107c7576107c76107ce565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122078526edbad77f077662813111710d487f46fe1ae1e79c55ef99b08f759f2d5f664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11338,
        "contract": "contracts/LemonadeUniqueCollectionV1.sol:LemonadeUniqueCollectionV1",
        "label": "collection",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}