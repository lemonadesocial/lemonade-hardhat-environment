{
  "address": "0x263dfF9528cB883cD5D44E9869b3dc89701dA418",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_initialSigner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "escrow",
          "type": "address"
        }
      ],
      "name": "EscrowCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "delegates",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "payees",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "shares",
          "type": "uint256[]"
        },
        {
          "internalType": "uint16",
          "name": "hostRefundPercent",
          "type": "uint16"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "percent",
              "type": "uint16"
            }
          ],
          "internalType": "struct RefundPolicy[]",
          "name": "refundPolicies",
          "type": "tuple[]"
        }
      ],
      "name": "createEscrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "setSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe32d50b4fcd7413728ec055f7505eedff5c02e4b36dd4ba33cc43dfe3fac7698",
  "receipt": {
    "to": null,
    "from": "0xf4a5990Ab778A2c760Be43f3380725BFC4D78b14",
    "contractAddress": "0x263dfF9528cB883cD5D44E9869b3dc89701dA418",
    "transactionIndex": 29,
    "gasUsed": "3502726",
    "logsBloom": "0x00000000000000002000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000020000000000000000000000000000000000002000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000800008000000000000000000000",
    "blockHash": "0x5609a9e7330a26acd6264892d78ad0de410457f9e7e1f5ff3a6031eb70e7cd66",
    "transactionHash": "0xe32d50b4fcd7413728ec055f7505eedff5c02e4b36dd4ba33cc43dfe3fac7698",
    "logs": [
      {
        "transactionIndex": 29,
        "blockNumber": 5051404,
        "transactionHash": "0xe32d50b4fcd7413728ec055f7505eedff5c02e4b36dd4ba33cc43dfe3fac7698",
        "address": "0x263dfF9528cB883cD5D44E9869b3dc89701dA418",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f4a5990ab778a2c760be43f3380725bfc4d78b14"
        ],
        "data": "0x",
        "logIndex": 34,
        "blockHash": "0x5609a9e7330a26acd6264892d78ad0de410457f9e7e1f5ff3a6031eb70e7cd66"
      }
    ],
    "blockNumber": 5051404,
    "cumulativeGasUsed": "6508553",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xca5AD04d2b42985134BB2E85E78CA6f143787e3B"
  ],
  "numDeployments": 5,
  "solcInputHash": "095fe4007456e217387c970606c508f0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialSigner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"escrow\",\"type\":\"address\"}],\"name\":\"EscrowCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"delegates\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16\",\"name\":\"hostRefundPercent\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"}],\"internalType\":\"struct RefundPolicy[]\",\"name\":\"refundPolicies\",\"type\":\"tuple[]\"}],\"name\":\"createEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/escrow/LemonadeEscrowFactoryV1.sol\":\"LemonadeEscrowFactoryV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/finance/PaymentSplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (finance/PaymentSplitter.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @title PaymentSplitter\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n *\\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\\n * to run tests before sending real value to this contract.\\n */\\ncontract PaymentSplitter is Context {\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address to, uint256 amount);\\n    event ERC20PaymentReleased(IERC20 indexed token, address to, uint256 amount);\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    uint256 private _totalShares;\\n    uint256 private _totalReleased;\\n\\n    mapping(address => uint256) private _shares;\\n    mapping(address => uint256) private _released;\\n    address[] private _payees;\\n\\n    mapping(IERC20 => uint256) private _erc20TotalReleased;\\n    mapping(IERC20 => mapping(address => uint256)) private _erc20Released;\\n\\n    /**\\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\n     * the matching position in the `shares` array.\\n     *\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in `payees`.\\n     */\\n    constructor(address[] memory payees, uint256[] memory shares_) payable {\\n        require(payees.length == shares_.length, \\\"PaymentSplitter: payees and shares length mismatch\\\");\\n        require(payees.length > 0, \\\"PaymentSplitter: no payees\\\");\\n\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            _addPayee(payees[i], shares_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n     * reliability of the events, and not the actual splitting of Ether.\\n     *\\n     * To learn more about this see the Solidity documentation for\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n     * functions].\\n     */\\n    receive() external payable virtual {\\n        emit PaymentReceived(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * @dev Getter for the total shares held by payees.\\n     */\\n    function totalShares() public view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of Ether already released.\\n     */\\n    function totalReleased() public view returns (uint256) {\\n        return _totalReleased;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\\n     * contract.\\n     */\\n    function totalReleased(IERC20 token) public view returns (uint256) {\\n        return _erc20TotalReleased[token];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of shares held by an account.\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        return _shares[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of Ether already released to a payee.\\n     */\\n    function released(address account) public view returns (uint256) {\\n        return _released[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function released(IERC20 token, address account) public view returns (uint256) {\\n        return _erc20Released[token][account];\\n    }\\n\\n    /**\\n     * @dev Getter for the address of the payee number `index`.\\n     */\\n    function payee(uint256 index) public view returns (address) {\\n        return _payees[index];\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     */\\n    function release(address payable account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = address(this).balance + totalReleased();\\n        uint256 payment = _pendingPayment(account, totalReceived, released(account));\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _released[account] += payment;\\n        _totalReleased += payment;\\n\\n        Address.sendValue(account, payment);\\n        emit PaymentReleased(account, payment);\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\\n     * contract.\\n     */\\n    function release(IERC20 token, address account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\\n        uint256 payment = _pendingPayment(account, totalReceived, released(token, account));\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _erc20Released[token][account] += payment;\\n        _erc20TotalReleased[token] += payment;\\n\\n        SafeERC20.safeTransfer(token, account, payment);\\n        emit ERC20PaymentReleased(token, account, payment);\\n    }\\n\\n    /**\\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\\n     * already released amounts.\\n     */\\n    function _pendingPayment(\\n        address account,\\n        uint256 totalReceived,\\n        uint256 alreadyReleased\\n    ) private view returns (uint256) {\\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\\n    }\\n\\n    /**\\n     * @dev Add a new payee to the contract.\\n     * @param account The address of the payee to add.\\n     * @param shares_ The number of shares owned by the payee.\\n     */\\n    function _addPayee(address account, uint256 shares_) private {\\n        require(account != address(0), \\\"PaymentSplitter: account is the zero address\\\");\\n        require(shares_ > 0, \\\"PaymentSplitter: shares are 0\\\");\\n        require(_shares[account] == 0, \\\"PaymentSplitter: account already has shares\\\");\\n\\n        _payees.push(account);\\n        _shares[account] = shares_;\\n        _totalShares = _totalShares + shares_;\\n        emit PayeeAdded(account, shares_);\\n    }\\n}\\n\",\"keccak256\":\"0x2a87bad9bc75d65820b12f3cac5f4075a8fc632cd1aa5b740262834415492433\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xacac2065b3ed1facff1163435890d4a6bcdc474e857e8e2c91ae5fb50418f723\",\"license\":\"MIT\"},\"contracts/escrow/ILemonadeEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nstruct RefundPolicy {\\n    uint256 timestamp;\\n    uint16 percent;\\n}\\n\\nstruct Deposit {\\n    address token;\\n    uint256 amount;\\n}\\n\\ninterface ILemonadeEscrow {\\n    error AccessDenied();\\n    error CannotClaimRefund();\\n    error EscrowHadClosed();\\n    error InvalidAmount();\\n    error InvalidDepositAmount();\\n    error InvalidHostRefundPercent();\\n    error InvalidRefundPercent();\\n    error InvalidRefundPolicies();\\n    error InvalidSigner();\\n    error NoDepositFound();\\n    error PaymentHadCancelled();\\n\\n    event GuestDeposit(\\n        address guest,\\n        uint256 paymentId,\\n        address token,\\n        uint256 amount\\n    );\\n    event GuestClaimRefund(address guest, uint256 paymentId);\\n    event EscrowClosed();\\n    event PaymentCancelled(uint256 paymentId, bool byGuest);\\n\\n    /**\\n     * Deposit an amount of ERC20 / native token to the payment.\\n     * Incase of ERC20 deposit, guest have to approve the allowance to the contract before calling this.\\n     * Revert if both ERC20 and native token are sent at a same time.\\n     * @param paymentId id of the payment to deposit\\n     * @param token contract address of token, zero address for native token\\n     * @param amount the amount to deposit, if native token then this must match msg.value\\n     */\\n    function deposit(\\n        uint256 paymentId,\\n        address token,\\n        uint256 amount\\n    ) external payable;\\n\\n    /**\\n     * Return the all deposits of a guest for a specific payment\\n     * @param paymentId id of the payment\\n     */\\n    function getDeposits(\\n        uint256 paymentId\\n    ) external view returns (Deposit[] memory);\\n\\n    /**\\n     * Cancel and refund the deposit amount to caller, both ERC20 and native token if any.\\n     * Refund amount affected by policies. If escrow is closed then must call claimRefund instead.\\n     * @param paymentId id of the payment\\n     */\\n    function cancelByGuest(uint256 paymentId, bytes calldata signature) external;\\n\\n    /**\\n     * Host cancel all the payments. Guests will have to call refund manually.\\n     */\\n    function closeEscrow() external;\\n\\n    /**\\n     * Host cancel a specific payment and allow user to claim refund.\\n     * @param paymentId id of the payment to cancel\\n     */\\n    function cancel(uint256 paymentId) external;\\n\\n    /**\\n     * Claim the deposit amount to called, both ERC20 and native token if any.\\n     * This can only be called after host has cancel the payment.\\n     * @param paymentId id of the payment to claim\\n     */\\n    function claimRefund(uint256 paymentId, bytes calldata signature) external;\\n\\n    /**\\n     * Check if the caller can claim refund for the payment.\\n     * @param paymentId id of the payment to check\\n     */\\n    function canClaimRefund(uint256 paymentId) external view returns (bool);\\n\\n    /**\\n     * Return the refund policies\\n     */\\n    function getRefundPolicies() external view returns (RefundPolicy[] memory);\\n}\\n\",\"keccak256\":\"0x64f69fd2e687dcee3432465cad874f3ea6c0c925f5b0fa26fb25b26f447f8c7a\",\"license\":\"MIT\"},\"contracts/escrow/ILemonadeEscrowFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ILemonadeEscrowFactory {\\n    function getSigner() external returns (address);\\n}\\n\",\"keccak256\":\"0xbe1e034b3346a790697a6ba02eac25cfc9f1bebf7e8540468277d8a394eba98e\",\"license\":\"MIT\"},\"contracts/escrow/LemonadeEscrowFactoryV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./ILemonadeEscrowFactory.sol\\\";\\nimport \\\"./ILemonadeEscrow.sol\\\";\\nimport \\\"./LemonadeEscrowV1.sol\\\";\\n\\ncontract LemonadeEscrowFactoryV1 is Ownable, ILemonadeEscrowFactory {\\n    address _signer;\\n\\n    event EscrowCreated(address escrow);\\n\\n    constructor(address _initialSigner) {\\n        setSigner(_initialSigner);\\n    }\\n\\n    function setSigner(address signer) public onlyOwner {\\n        _signer = signer;\\n    }\\n\\n    function getSigner() public view override returns (address) {\\n        return _signer;\\n    }\\n\\n    function createEscrow(\\n        address owner,\\n        address[] memory delegates,\\n        address[] memory payees,\\n        uint256[] memory shares,\\n        uint16 hostRefundPercent,\\n        RefundPolicy[] memory refundPolicies\\n    ) external {\\n        ILemonadeEscrow escrow = new LemonadeEscrowV1(\\n            owner,\\n            delegates,\\n            payees,\\n            shares,\\n            hostRefundPercent,\\n            refundPolicies,\\n            address(this)\\n        );\\n\\n        emit EscrowCreated(address(escrow));\\n    }\\n}\\n\",\"keccak256\":\"0x8fb1684ee2797b0cff4719bdb3de5b2fe32432568c800d721f4f48b4c166006e\",\"license\":\"MIT\"},\"contracts/escrow/LemonadeEscrowV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/finance/PaymentSplitter.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport \\\"./ILemonadeEscrow.sol\\\";\\nimport \\\"./ILemonadeEscrowFactory.sol\\\";\\n\\nbytes32 constant ESCROW_DELEGATE_ROLE = keccak256(\\\"ESCROW_DELEGATE_ROLE\\\");\\n\\ncontract LemonadeEscrowV1 is\\n    ILemonadeEscrow,\\n    PaymentSplitter,\\n    AccessControlEnumerable\\n{\\n    using ECDSA for bytes;\\n    using ECDSA for bytes32;\\n\\n    bool public closed;\\n    uint16 public hostRefundPercent;\\n\\n    RefundPolicy[] _refundPolicies;\\n    mapping(uint256 => bool) _paymentCancelled;\\n    mapping(uint256 => Deposit[]) _deposits;\\n    ILemonadeEscrowFactory _factory;\\n\\n    constructor(\\n        address owner,\\n        address[] memory delegates,\\n        address[] memory payees,\\n        uint256[] memory shares,\\n        uint16 refundPercent,\\n        RefundPolicy[] memory refundPolicies,\\n        address factory\\n    ) PaymentSplitter(payees, shares) {\\n        if (refundPercent > 100) {\\n            revert InvalidHostRefundPercent();\\n        }\\n\\n        hostRefundPercent = refundPercent;\\n\\n        //-- check valid refundPolicies\\n        uint256 refundPoliciesLength = refundPolicies.length;\\n\\n        if (refundPoliciesLength == 1) {\\n            RefundPolicy memory policy = refundPolicies[0];\\n\\n            _assertValidRefundPercent(policy);\\n            _refundPolicies.push(policy);\\n        } else if (refundPoliciesLength > 1) {\\n            RefundPolicy memory current;\\n            RefundPolicy memory next;\\n\\n            next = refundPolicies[0];\\n\\n            _assertValidRefundPercent(next);\\n            _refundPolicies.push(next);\\n\\n            for (uint256 i = 1; i < refundPoliciesLength; ) {\\n                current = next;\\n                next = refundPolicies[i];\\n\\n                if (\\n                    current.timestamp >= next.timestamp ||\\n                    current.percent <= next.percent\\n                ) {\\n                    revert InvalidRefundPolicies();\\n                }\\n\\n                _assertValidRefundPercent(next);\\n                _refundPolicies.push(next);\\n\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, owner);\\n        _grantRole(ESCROW_DELEGATE_ROLE, owner);\\n\\n        uint256 delegatesLength = delegates.length;\\n        for (uint256 i; i < delegatesLength; ) {\\n            _grantRole(ESCROW_DELEGATE_ROLE, delegates[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        _factory = ILemonadeEscrowFactory(factory);\\n    }\\n\\n    //- modifiers\\n\\n    modifier onlyDelegate() {\\n        if (!hasRole(ESCROW_DELEGATE_ROLE, _msgSender())) {\\n            revert AccessDenied();\\n        }\\n        _;\\n    }\\n\\n    modifier escrowOpen() {\\n        if (closed) {\\n            revert EscrowHadClosed();\\n        }\\n        _;\\n    }\\n\\n    //-- public write functions\\n\\n    function deposit(\\n        uint256 paymentId,\\n        address token,\\n        uint256 amount\\n    ) external payable override escrowOpen {\\n        uint256 value = msg.value;\\n\\n        if (amount == 0) {\\n            revert InvalidAmount();\\n        }\\n\\n        if (_paymentCancelled[paymentId]) {\\n            revert PaymentHadCancelled();\\n        }\\n\\n        bool isErc20 = token != address(0);\\n        if ((isErc20 && value != 0) || (!isErc20 && value != amount)) {\\n            revert InvalidDepositAmount();\\n        }\\n\\n        address sender = _msgSender();\\n\\n        if (isErc20) {\\n            IERC20(token).transferFrom(sender, address(this), amount);\\n        }\\n\\n        _deposits[paymentId].push(Deposit(token, amount));\\n\\n        emit GuestDeposit(sender, paymentId, token, amount);\\n    }\\n\\n    function cancelByGuest(\\n        uint256 paymentId,\\n        bytes calldata signature\\n    ) external override escrowOpen {\\n        if (_paymentCancelled[paymentId]) {\\n            revert PaymentHadCancelled();\\n        }\\n\\n        //-- calculate refund percent based on policy\\n        uint16 percent;\\n\\n        uint256 refundPoliciesLength = _refundPolicies.length;\\n\\n        for (uint256 i; i < refundPoliciesLength; ) {\\n            RefundPolicy memory policy = _refundPolicies[\\n                _refundPolicies.length - 1 - i\\n            ];\\n\\n            if (block.timestamp < policy.timestamp) {\\n                percent = policy.percent;\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        //-- perform refund\\n        _paymentCancelled[paymentId] = true;\\n        _refundWithPercent(_msgSender(), paymentId, percent, signature);\\n\\n        emit PaymentCancelled(paymentId, true);\\n    }\\n\\n    function closeEscrow() external override onlyDelegate escrowOpen {\\n        closed = true;\\n\\n        emit EscrowClosed();\\n    }\\n\\n    function cancel(uint256 paymentId) external override onlyDelegate {\\n        _paymentCancelled[paymentId] = true;\\n\\n        emit PaymentCancelled(paymentId, false);\\n    }\\n\\n    function claimRefund(\\n        uint256 paymentId,\\n        bytes calldata signature\\n    ) external override {\\n        address sender = _msgSender();\\n\\n        if (!canClaimRefund(paymentId)) {\\n            revert CannotClaimRefund();\\n        }\\n\\n        //-- perform refund with hostRefundPercent\\n        _refundWithPercent(sender, paymentId, hostRefundPercent, signature);\\n\\n        emit GuestClaimRefund(sender, paymentId);\\n    }\\n\\n    //-- public read functions\\n\\n    function getRefundPolicies()\\n        external\\n        view\\n        override\\n        returns (RefundPolicy[] memory)\\n    {\\n        uint256 length = _refundPolicies.length;\\n\\n        RefundPolicy[] memory policies = new RefundPolicy[](length);\\n\\n        for (uint256 i; i < length; ) {\\n            RefundPolicy memory policy = _refundPolicies[i];\\n\\n            policies[i] = RefundPolicy(policy.timestamp, policy.percent);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return policies;\\n    }\\n\\n    function canClaimRefund(\\n        uint256 paymentId\\n    ) public view override returns (bool) {\\n        return closed || _paymentCancelled[paymentId];\\n    }\\n\\n    function getDeposits(\\n        uint256 paymentId\\n    ) public view override returns (Deposit[] memory) {\\n        return _deposits[paymentId];\\n    }\\n\\n    //-- internal & private functions\\n    function _assertRefundSigner(\\n        uint256 paymentId,\\n        bytes memory signature\\n    ) internal {\\n        address actualSigner = abi\\n            .encode(paymentId)\\n            .toEthSignedMessageHash()\\n            .recover(signature);\\n\\n        address expectedSigner = _factory.getSigner();\\n\\n        if (actualSigner != expectedSigner) {\\n            revert InvalidSigner();\\n        }\\n    }\\n\\n    function _assertValidRefundPercent(\\n        RefundPolicy memory policy\\n    ) internal pure {\\n        if (policy.percent > 100) {\\n            revert InvalidRefundPercent();\\n        }\\n    }\\n\\n    function _refundWithPercent(\\n        address guest,\\n        uint256 paymentId,\\n        uint16 percent,\\n        bytes memory signature\\n    ) internal {\\n        _assertRefundSigner(paymentId, signature);\\n\\n        if (percent == 0) return;\\n\\n        Deposit[] memory deposits = getDeposits(paymentId);\\n\\n        if (deposits.length == 0) {\\n            revert NoDepositFound();\\n        }\\n\\n        //-- clear deposit array to prevent reentrance\\n        delete _deposits[paymentId];\\n\\n        uint256 depositsLength = deposits.length;\\n\\n        for (uint16 i = 0; i < depositsLength; ) {\\n            Deposit memory dep = deposits[i];\\n\\n            uint256 amount = (dep.amount * percent) / 100;\\n\\n            if (dep.token == address(0)) {\\n                payable(guest).transfer(amount);\\n            } else {\\n                IERC20(dep.token).transfer(guest, amount);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x90e8cd4779d92aa170d1a457a6402fe82a56378a95c84c96eac663753c883e30\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051613ed9380380613ed983398101604081905261002f91610117565b61003833610047565b61004181610097565b50610145565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146100f55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600060208284031215610128578081fd5b81516001600160a01b038116811461013e578182fd5b9392505050565b613d85806101546000396000f3fe60806040523480156200001157600080fd5b50600436106200006a5760003560e01c80636c19e783146200006f578063715018a614620000885780637ac3c02f14620000925780638da5cb5b14620000bb578063b0bc30d314620000cd578063f2fde38b14620000e4575b600080fd5b6200008662000080366004620004c4565b620000fb565b005b6200008662000153565b6001546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b6000546001600160a01b03166200009f565b62000086620000de366004620004e8565b6200018e565b62000086620000f5366004620004c4565b6200021d565b6000546001600160a01b03163314620001315760405162461bcd60e51b81526004016200012890620006fe565b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314620001805760405162461bcd60e51b81526004016200012890620006fe565b6200018c6000620002bf565b565b600086868686868630604051620001a5906200030f565b620001b7979695949392919062000646565b604051809103906000f080158015620001d4573d6000803e3d6000fd5b506040516001600160a01b03821681529091507fdc172423e65e4eb718110c42ad3b66ac4b0a613e4d07bfb55f2477f2d1bf34eb9060200160405180910390a150505050505050565b6000546001600160a01b031633146200024a5760405162461bcd60e51b81526004016200012890620006fe565b6001600160a01b038116620002b15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000128565b620002bc81620002bf565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61357f80620007d183390190565b80356001600160a01b03811681146200033557600080fd5b919050565b600082601f8301126200034b578081fd5b81356020620003646200035e8362000793565b6200075f565b80838252828201915082860187848660051b890101111562000384578586fd5b855b85811015620003ad576200039a826200031d565b8452928401929084019060010162000386565b5090979650505050505050565b600082601f830112620003cb578081fd5b81356020620003de6200035e8362000793565b80838252828201915082860187848660061b8901011115620003fe578586fd5b855b85811015620003ad57604080838b0312156200041a578788fd5b6200042462000733565b8335815262000435878501620004b1565b81880152855293850193919091019060010162000400565b600082601f8301126200045e578081fd5b81356020620004716200035e8362000793565b80838252828201915082860187848660051b890101111562000491578586fd5b855b85811015620003ad5781358452928401929084019060010162000493565b803561ffff811681146200033557600080fd5b600060208284031215620004d6578081fd5b620004e1826200031d565b9392505050565b60008060008060008060c0878903121562000501578182fd5b6200050c876200031d565b9550602087013567ffffffffffffffff8082111562000529578384fd5b620005378a838b016200033a565b965060408901359150808211156200054d578384fd5b6200055b8a838b016200033a565b9550606089013591508082111562000571578384fd5b6200057f8a838b016200044d565b94506200058f60808a01620004b1565b935060a0890135915080821115620005a5578283fd5b50620005b489828a01620003ba565b9150509295509295509295565b6000815180845260208085019450808401835b83811015620005fb5781516001600160a01b031687529582019590820190600101620005d4565b509495945050505050565b6000815180845260208085019450808401835b83811015620005fb5781518051885283015161ffff16838801526040909601959082019060010162000619565b6001600160a01b038816815260e060208083018290526000916200066d9084018a620005c1565b838103604085015262000681818a620005c1565b84810360608601528851808252838a01925090830190845b81811015620006b75783518352928401929184019160010162000699565b505061ffff8816608086015284810360a0860152620006d7818862000606565b9350505050620006f260c08301846001600160a01b03169052565b98975050505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6040805190810167ffffffffffffffff81118282101715620007595762000759620007ba565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156200078b576200078b620007ba565b604052919050565b600067ffffffffffffffff821115620007b057620007b0620007ba565b5060051b60200190565b634e487b7160e01b600052604160045260246000fdfe60806040523480156200001157600080fd5b506040516200357f3803806200357f8339810160408190526200003491620009ed565b84848051825114620000a85760405162461bcd60e51b815260206004820152603260248201527f5061796d656e7453706c69747465723a2070617965657320616e6420736861726044820152710cae640d8cadccee8d040dad2e6dac2e8c6d60731b60648201526084015b60405180910390fd5b6000825111620000fb5760405162461bcd60e51b815260206004820152601a60248201527f5061796d656e7453706c69747465723a206e6f2070617965657300000000000060448201526064016200009f565b60005b82518110156200017f576200016a8382815181106200012d57634e487b7160e01b600052603260045260246000fd5b60200260200101518383815181106200015657634e487b7160e01b600052603260045260246000fd5b6020026020010151620004d260201b60201c565b80620001768162000b79565b915050620000fe565b50505060648361ffff161115620001a957604051631fd655cd60e11b815260040160405180910390fd5b6009805462ffff00191661010061ffff861602179055815160018114156200026757600083600081518110620001ef57634e487b7160e01b600052603260045260246000fd5b602002602001015190506200020a81620006be60201b60201c565b600a805460018101825560009190915281516000805160206200353f8339815191526002909202918201556020909101516000805160206200351f833981519152909101805461ffff191661ffff90921691909117905562000419565b600181111562000419576040805180820190915260008082526020820152604080518082019091526000808252602082015284600081518110620002bb57634e487b7160e01b600052603260045260246000fd5b60200260200101519050620002d681620006be60201b60201c565b600a80546001808201835560009290925282516000805160206200353f83398151915260029092029182015560208301516000805160206200351f833981519152909101805461ffff191661ffff9092169190911790555b8381101562000415578192508581815181106200035b57634e487b7160e01b600052603260045260246000fd5b60200260200101519150816000015183600001511015806200038d5750816020015161ffff16836020015161ffff1611155b15620003ac57604051638ebf7c8f60e01b815260040160405180910390fd5b620003b782620006be565b600a80546001808201835560009290925283516000805160206200353f83398151915260029092029182015560208401516000805160206200351f833981519152909101805461ffff191661ffff909216919091179055016200032e565b5050505b62000426600089620006ec565b620004416000805160206200355f83398151915289620006ec565b865160005b81811015620004a157620004986000805160206200355f8339815191528a83815181106200048457634e487b7160e01b600052603260045260246000fd5b6020026020010151620006ec60201b60201c565b60010162000446565b5050600d80546001600160a01b0319166001600160a01b0393909316929092179091555062000bc395505050505050565b6001600160a01b0382166200053f5760405162461bcd60e51b815260206004820152602c60248201527f5061796d656e7453706c69747465723a206163636f756e74206973207468652060448201526b7a65726f206164647265737360a01b60648201526084016200009f565b60008111620005915760405162461bcd60e51b815260206004820152601d60248201527f5061796d656e7453706c69747465723a2073686172657320617265203000000060448201526064016200009f565b6001600160a01b038216600090815260026020526040902054156200060d5760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e7420616c726561647960448201526a206861732073686172657360a81b60648201526084016200009f565b60048054600181019091557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319166001600160a01b0384169081179091556000908152600260205260408120829055546200067590829062000b5e565b600055604080516001600160a01b0384168152602081018390527f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac910160405180910390a15050565b6064816020015161ffff161115620006e9576040516324999a8f60e21b815260040160405180910390fd5b50565b6200070382826200072f60201b6200124b1760201c565b60008281526008602090815260409091206200072a918390620012d1620007d4821b17901c565b505050565b60008281526007602090815260408083206001600160a01b038516845290915290205460ff16620007d05760008281526007602090815260408083206001600160a01b03851684529091529020805460ff191660011790556200078f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000620007eb836001600160a01b038416620007f4565b90505b92915050565b60008181526001830160205260408120546200083d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620007ee565b506000620007ee565b80516001600160a01b03811681146200085e57600080fd5b919050565b600082601f83011262000874578081fd5b815160206200088d620008878362000b38565b62000b05565b80838252828201915082860187848660051b8901011115620008ad578586fd5b855b85811015620008d657620008c38262000846565b84529284019290840190600101620008af565b5090979650505050505050565b600082601f830112620008f4578081fd5b8151602062000907620008878362000b38565b80838252828201915082860187848660061b890101111562000927578586fd5b855b85811015620008d657604080838b03121562000943578788fd5b6200094d62000ada565b835181526200095e878501620009da565b81880152855293850193919091019060010162000929565b600082601f83011262000987578081fd5b815160206200099a620008878362000b38565b80838252828201915082860187848660051b8901011115620009ba578586fd5b855b85811015620008d657815184529284019290840190600101620009bc565b805161ffff811681146200085e57600080fd5b600080600080600080600060e0888a03121562000a08578283fd5b62000a138862000846565b60208901519097506001600160401b038082111562000a30578485fd5b62000a3e8b838c0162000863565b975060408a015191508082111562000a54578485fd5b62000a628b838c0162000863565b965060608a015191508082111562000a78578485fd5b62000a868b838c0162000976565b955062000a9660808b01620009da565b945060a08a015191508082111562000aac578384fd5b5062000abb8a828b01620008e3565b92505062000acc60c0890162000846565b905092959891949750929550565b604080519081016001600160401b038111828210171562000aff5762000aff62000bad565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000b305762000b3062000bad565b604052919050565b60006001600160401b0382111562000b545762000b5462000bad565b5060051b60200190565b6000821982111562000b745762000b7462000b97565b500190565b600060001982141562000b905762000b9062000b97565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b61294c8062000bd36000396000f3fe6080604052600436106101bb5760003560e01c80638b83209b116100ec578063ca15c8731161008a578063d547741f11610064578063d547741f14610596578063d79779b2146105b6578063e33b7de3146105ec578063fab480f41461060157600080fd5b8063ca15c87314610520578063ce7c2ac214610540578063d2fd101b1461057657600080fd5b80639852595c116100c65780639852595c146104ad578063a217fddf146104e3578063bc157ac1146104f8578063c163de3d1461050b57600080fd5b80638b83209b146104355780639010d07c1461046d57806391d148541461048d57600080fd5b806336568abe1161015957806340e58ee51161013357806340e58ee5146103b957806348b75044146103d9578063597e1fb5146103f9578063700d4aec1461041357600080fd5b806336568abe1461033e5780633a98ef391461035e578063406072a91461037357600080fd5b80631916558711610195578063191655871461029e578063245a91a3146102c0578063248a9ca3146102e05780632f2ff15d1461031e57600080fd5b806301ffc9a714610209578063085c967f1461023e578063129f33171461026b57600080fd5b36610204577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be77033604080516001600160a01b0390921682523460208301520160405180910390a1005b600080fd5b34801561021557600080fd5b50610229610224366004612498565b610621565b60405190151581526020015b60405180910390f35b34801561024a57600080fd5b5061025e610259366004612430565b61064c565b604051610235919061269f565b34801561027757600080fd5b5060095461028b90610100900461ffff1681565b60405161ffff9091168152602001610235565b3480156102aa57600080fd5b506102be6102b93660046123d8565b6106d4565b005b3480156102cc57600080fd5b506102296102db366004612430565b61080b565b3480156102ec57600080fd5b506103106102fb366004612430565b60009081526007602052604090206001015490565b604051908152602001610235565b34801561032a57600080fd5b506102be610339366004612448565b610830565b34801561034a57600080fd5b506102be610359366004612448565b61085a565b34801561036a57600080fd5b50600054610310565b34801561037f57600080fd5b5061031061038e3660046124c0565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205490565b3480156103c557600080fd5b506102be6103d4366004612430565b6108d8565b3480156103e557600080fd5b506102be6103f43660046124c0565b61097e565b34801561040557600080fd5b506009546102299060ff1681565b34801561041f57600080fd5b50610428610b66565b60405161023591906126f7565b34801561044157600080fd5b50610455610450366004612430565b610c90565b6040516001600160a01b039091168152602001610235565b34801561047957600080fd5b50610455610488366004612477565b610cce565b34801561049957600080fd5b506102296104a8366004612448565b610ced565b3480156104b957600080fd5b506103106104c83660046123d8565b6001600160a01b031660009081526003602052604090205490565b3480156104ef57600080fd5b50610310600081565b6102be610506366004612505565b610d18565b34801561051757600080fd5b506102be610f1b565b34801561052c57600080fd5b5061031061053b366004612430565b610fbe565b34801561054c57600080fd5b5061031061055b3660046123d8565b6001600160a01b031660009081526002602052604090205490565b34801561058257600080fd5b506102be61059136600461253c565b610fd5565b3480156105a257600080fd5b506102be6105b1366004612448565b611096565b3480156105c257600080fd5b506103106105d13660046123d8565b6001600160a01b031660009081526005602052604090205490565b3480156105f857600080fd5b50600154610310565b34801561060d57600080fd5b506102be61061c36600461253c565b6110bb565b60006001600160e01b03198216635a05180f60e01b14806106465750610646826112e6565b92915050565b6060600c6000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156106c9576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101610681565b505050509050919050565b6001600160a01b0381166000908152600260205260409020546107125760405162461bcd60e51b815260040161070990612770565b60405180910390fd5b600061071d60015490565b6107279047612801565b90506000610754838361074f866001600160a01b031660009081526003602052604090205490565b61131b565b9050806107735760405162461bcd60e51b8152600401610709906127b6565b6001600160a01b0383166000908152600360205260408120805483929061079b908490612801565b9250508190555080600160008282546107b49190612801565b909155506107c49050838261135e565b604080516001600160a01b0385168152602081018390527fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b056910160405180910390a1505050565b60095460009060ff16806106465750506000908152600b602052604090205460ff1690565b60008281526007602052604090206001015461084b81611477565b6108558383611484565b505050565b6001600160a01b03811633146108ca5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610709565b6108d482826114a6565b5050565b6109027fb012ba8c7281edbf1d476d7a0eccd3cb202b439a7f0a8f6c574f02e5df5c10b133610ced565b61091f57604051634ca8886760e01b815260040160405180910390fd5b6000818152600b6020526040808220805460ff19166001179055517f3fdad7f8cdfcd1b65d4d09d35f3a990abd6d5cf186ba129cfb4abbf332cf961b91610973918491909182521515602082015260400190565b60405180910390a150565b6001600160a01b0381166000908152600260205260409020546109b35760405162461bcd60e51b815260040161070990612770565b6001600160a01b0382166000908152600560205260408120546040516370a0823160e01b81523060048201526001600160a01b038516906370a082319060240160206040518083038186803b158015610a0b57600080fd5b505afa158015610a1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4391906124ed565b610a4d9190612801565b90506000610a86838361074f87876001600160a01b03918216600090815260066020908152604080832093909416825291909152205490565b905080610aa55760405162461bcd60e51b8152600401610709906127b6565b6001600160a01b03808516600090815260066020908152604080832093871683529290529081208054839290610adc908490612801565b90915550506001600160a01b03841660009081526005602052604081208054839290610b09908490612801565b90915550610b1a90508484836114c8565b604080516001600160a01b038581168252602082018490528616917f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a910160405180910390a250505050565b600a5460609060008167ffffffffffffffff811115610b9557634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610bda57816020015b6040805180820190915260008082526020820152815260200190600190039081610bb35790505b50905060005b82811015610c89576000600a8281548110610c0b57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805180820182526002909302909101805483526001015461ffff9081168385019081528251808401909352835183525116928101929092528451909250849084908110610c7557634e487b7160e01b600052603260045260246000fd5b602090810291909101015250600101610be0565b5092915050565b600060048281548110610cb357634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031692915050565b6000828152600860205260408120610ce6908361151a565b9392505050565b60009182526007602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60095460ff1615610d3c57604051638819799d60e01b815260040160405180910390fd5b3481610d5b5760405163162908e360e11b815260040160405180910390fd5b6000848152600b602052604090205460ff1615610d8b5760405163b8f8d1f760e01b815260040160405180910390fd5b6001600160a01b038316158015908190610da457508115155b80610db8575080158015610db85750828214155b15610dd65760405163fe9ba5cd60e01b815260040160405180910390fd5b338115610e67576040516323b872dd60e01b81526001600160a01b038281166004830152306024830152604482018690528616906323b872dd90606401602060405180830381600087803b158015610e2d57600080fd5b505af1158015610e41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e659190612410565b505b6000868152600c60209081526040808320815180830183526001600160a01b038a81168083528286018b8152845460018082018755958952978790209351600290980290930180546001600160a01b0319169783169790971787559151959092019490945581519085168152918201899052810191909152606081018590527fde50620a8362ed2d89afd08b856fe6db50ad03c096d5f6e10a7ce71ee5359de39060800160405180910390a1505050505050565b610f457fb012ba8c7281edbf1d476d7a0eccd3cb202b439a7f0a8f6c574f02e5df5c10b133610ced565b610f6257604051634ca8886760e01b815260040160405180910390fd5b60095460ff1615610f8657604051638819799d60e01b815260040160405180910390fd5b6009805460ff191660011790556040517fc67401958d8f4f70d6e5fb87c0190c6f0df5a05a8926d934f81c7491e7402f4790600090a1565b600081815260086020526040812061064690611526565b33610fdf8461080b565b610ffc576040516332d6d8f560e21b815260040160405180910390fd5b61104e8185600960019054906101000a900461ffff1686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061153092505050565b604080516001600160a01b0383168152602081018690527fe6cdcbc54159ba58a71f3aae716b81d82506c6fc76a7383e605e7e365d834425910160405180910390a150505050565b6000828152600760205260409020600101546110b181611477565b61085583836114a6565b60095460ff16156110df57604051638819799d60e01b815260040160405180910390fd5b6000838152600b602052604090205460ff161561110f5760405163b8f8d1f760e01b815260040160405180910390fd5b600a54600090815b818110156111a9576000600a826001600a80549050611136919061284c565b611140919061284c565b8154811061115e57634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051808201909152600290920201805480835260019091015461ffff169282019290925291504210156111a057806020015193505b50600101611117565b506000858152600b60205260409020805460ff1916600117905561120b6111cd3390565b868487878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061153092505050565b60408051868152600160208201527f3fdad7f8cdfcd1b65d4d09d35f3a990abd6d5cf186ba129cfb4abbf332cf961b910160405180910390a15050505050565b6112558282610ced565b6108d45760008281526007602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561128d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610ce6836001600160a01b0384166116db565b60006001600160e01b03198216637965db0b60e01b148061064657506301ffc9a760e01b6001600160e01b0319831614610646565b600080546001600160a01b038516825260026020526040822054839190611342908661282d565b61134c9190612819565b611356919061284c565b949350505050565b804710156113ae5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610709565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146113fb576040519150601f19603f3d011682016040523d82523d6000602084013e611400565b606091505b50509050806108555760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610709565b611481813361172a565b50565b61148e828261124b565b600082815260086020526040902061085590826112d1565b6114b0828261178e565b600082815260086020526040902061085590826117f5565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261085590849061180a565b6000610ce683836118dc565b6000610646825490565b61153a8382611914565b61ffff8216611548576116d5565b60006115538461064c565b90508051600014156115785760405163d1dafa8560e01b815260040160405180910390fd5b6000848152600c6020526040812061158f91612392565b805160005b818161ffff1610156116d1576000838261ffff16815181106115c657634e487b7160e01b600052603260045260246000fd5b60200260200101519050600060648761ffff1683602001516115e8919061282d565b6115f29190612819565b82519091506001600160a01b0316611640576040516001600160a01b038a169082156108fc029083906000818181858888f1935050505015801561163a573d6000803e3d6000fd5b506116c7565b815160405163a9059cbb60e01b81526001600160a01b038b81166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b15801561168d57600080fd5b505af11580156116a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c59190612410565b505b5050600101611594565b5050505b50505050565b600081815260018301602052604081205461172257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610646565b506000610646565b6117348282610ced565b6108d45761174c816001600160a01b03166014611a0a565b611757836020611a0a565b60405160200161176892919061262a565b60408051601f198184030181529082905262461bcd60e51b82526107099160040161273d565b6117988282610ced565b156108d45760008281526007602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610ce6836001600160a01b038416611bec565b600061185f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611d099092919063ffffffff16565b805190915015610855578080602001905181019061187d9190612410565b6108555760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610709565b600082600001828154811061190157634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b600061194a826119448560405160200161193091815260200190565b604051602081830303815290604052611d18565b90611d53565b90506000600d60009054906101000a90046001600160a01b03166001600160a01b0316637ac3c02f6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561199e57600080fd5b505af11580156119b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d691906123f4565b9050806001600160a01b0316826001600160a01b0316146116d557604051632057875960e21b815260040160405180910390fd5b60606000611a1983600261282d565b611a24906002612801565b67ffffffffffffffff811115611a4a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611a74576020820181803683370190505b509050600360fc1b81600081518110611a9d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611ada57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000611afe84600261282d565b611b09906001612801565b90505b6001811115611b9d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611b4b57634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110611b6f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93611b968161288f565b9050611b0c565b508315610ce65760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610709565b60008181526001830160205260408120548015611cff576000611c1060018361284c565b8554909150600090611c249060019061284c565b9050818114611ca5576000866000018281548110611c5257634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110611c8357634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611cc457634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610646565b6000915050610646565b60606113568484600085611d77565b6000611d248251611ea8565b82604051602001611d369291906125cf565b604051602081830303815290604052805190602001209050919050565b6000806000611d628585611fc2565b91509150611d6f81612032565b509392505050565b606082471015611dd85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610709565b6001600160a01b0385163b611e2f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610709565b600080866001600160a01b03168587604051611e4b91906125b3565b60006040518083038185875af1925050503d8060008114611e88576040519150601f19603f3d011682016040523d82523d6000602084013e611e8d565b606091505b5091509150611e9d828286612233565b979650505050505050565b606081611ecc5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611ef65780611ee0816128a6565b9150611eef9050600a83612819565b9150611ed0565b60008167ffffffffffffffff811115611f1f57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611f49576020820181803683370190505b5090505b841561135657611f5e60018361284c565b9150611f6b600a866128c1565b611f76906030612801565b60f81b818381518110611f9957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611fbb600a86612819565b9450611f4d565b600080825160411415611ff95760208301516040840151606085015160001a611fed8782858561226c565b9450945050505061202b565b8251604014156120235760208301516040840151612018868383612359565b93509350505061202b565b506000905060025b9250929050565b600081600481111561205457634e487b7160e01b600052602160045260246000fd5b141561205d5750565b600181600481111561207f57634e487b7160e01b600052602160045260246000fd5b14156120cd5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610709565b60028160048111156120ef57634e487b7160e01b600052602160045260246000fd5b141561213d5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610709565b600381600481111561215f57634e487b7160e01b600052602160045260246000fd5b14156121b85760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610709565b60048160048111156121da57634e487b7160e01b600052602160045260246000fd5b14156114815760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610709565b60608315612242575081610ce6565b8251156122525782518084602001fd5b8160405162461bcd60e51b8152600401610709919061273d565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156122a35750600090506003612350565b8460ff16601b141580156122bb57508460ff16601c14155b156122cc5750600090506004612350565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612320573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661234957600060019250925050612350565b9150600090505b94509492505050565b6000806001600160ff1b0383168161237660ff86901c601b612801565b90506123848782888561226c565b935093505050935093915050565b508054600082556002029060005260206000209081019061148191905b808211156123d45780546001600160a01b0319168155600060018201556002016123af565b5090565b6000602082840312156123e9578081fd5b8135610ce681612901565b600060208284031215612405578081fd5b8151610ce681612901565b600060208284031215612421578081fd5b81518015158114610ce6578182fd5b600060208284031215612441578081fd5b5035919050565b6000806040838503121561245a578081fd5b82359150602083013561246c81612901565b809150509250929050565b60008060408385031215612489578182fd5b50508035926020909101359150565b6000602082840312156124a9578081fd5b81356001600160e01b031981168114610ce6578182fd5b600080604083850312156124d2578182fd5b82356124dd81612901565b9150602083013561246c81612901565b6000602082840312156124fe578081fd5b5051919050565b600080600060608486031215612519578081fd5b83359250602084013561252b81612901565b929592945050506040919091013590565b600080600060408486031215612550578283fd5b83359250602084013567ffffffffffffffff8082111561256e578384fd5b818601915086601f830112612581578384fd5b81358181111561258f578485fd5b8760208285010111156125a0578485fd5b6020830194508093505050509250925092565b600082516125c5818460208701612863565b9190910192915050565b7f19457468657265756d205369676e6564204d6573736167653a0a00000000000081526000835161260781601a850160208801612863565b83519083019061261e81601a840160208801612863565b01601a01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612662816017850160208801612863565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612693816028840160208801612863565b01602801949350505050565b602080825282518282018190526000919060409081850190868401855b828110156126ea57815180516001600160a01b031685528601518685015292840192908501906001016126bc565b5091979650505050505050565b602080825282518282018190526000919060409081850190868401855b828110156126ea5781518051855286015161ffff16868501529284019290850190600101612714565b602081526000825180602084015261275c816040850160208701612863565b601f01601f19169190910160400192915050565b60208082526026908201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060408201526573686172657360d01b606082015260800190565b6020808252602b908201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060408201526a191d59481c185e5b595b9d60aa1b606082015260800190565b60008219821115612814576128146128d5565b500190565b600082612828576128286128eb565b500490565b6000816000190483118215151615612847576128476128d5565b500290565b60008282101561285e5761285e6128d5565b500390565b60005b8381101561287e578181015183820152602001612866565b838111156116d55750506000910152565b60008161289e5761289e6128d5565b506000190190565b60006000198214156128ba576128ba6128d5565b5060010190565b6000826128d0576128d06128eb565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6001600160a01b038116811461148157600080fdfea2646970667358221220a04dc1aa2052fce0e63a21a7a6576b1cdb62c9edcaf4b5d16b613df30f73a35364736f6c63430008040033c65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a9c65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8b012ba8c7281edbf1d476d7a0eccd3cb202b439a7f0a8f6c574f02e5df5c10b1a2646970667358221220d9dccfacad6ec367e3319e819d959fff53b6435068a0d1e33838e495a758e67764736f6c63430008040033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200006a5760003560e01c80636c19e783146200006f578063715018a614620000885780637ac3c02f14620000925780638da5cb5b14620000bb578063b0bc30d314620000cd578063f2fde38b14620000e4575b600080fd5b6200008662000080366004620004c4565b620000fb565b005b6200008662000153565b6001546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b6000546001600160a01b03166200009f565b62000086620000de366004620004e8565b6200018e565b62000086620000f5366004620004c4565b6200021d565b6000546001600160a01b03163314620001315760405162461bcd60e51b81526004016200012890620006fe565b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314620001805760405162461bcd60e51b81526004016200012890620006fe565b6200018c6000620002bf565b565b600086868686868630604051620001a5906200030f565b620001b7979695949392919062000646565b604051809103906000f080158015620001d4573d6000803e3d6000fd5b506040516001600160a01b03821681529091507fdc172423e65e4eb718110c42ad3b66ac4b0a613e4d07bfb55f2477f2d1bf34eb9060200160405180910390a150505050505050565b6000546001600160a01b031633146200024a5760405162461bcd60e51b81526004016200012890620006fe565b6001600160a01b038116620002b15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000128565b620002bc81620002bf565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61357f80620007d183390190565b80356001600160a01b03811681146200033557600080fd5b919050565b600082601f8301126200034b578081fd5b81356020620003646200035e8362000793565b6200075f565b80838252828201915082860187848660051b890101111562000384578586fd5b855b85811015620003ad576200039a826200031d565b8452928401929084019060010162000386565b5090979650505050505050565b600082601f830112620003cb578081fd5b81356020620003de6200035e8362000793565b80838252828201915082860187848660061b8901011115620003fe578586fd5b855b85811015620003ad57604080838b0312156200041a578788fd5b6200042462000733565b8335815262000435878501620004b1565b81880152855293850193919091019060010162000400565b600082601f8301126200045e578081fd5b81356020620004716200035e8362000793565b80838252828201915082860187848660051b890101111562000491578586fd5b855b85811015620003ad5781358452928401929084019060010162000493565b803561ffff811681146200033557600080fd5b600060208284031215620004d6578081fd5b620004e1826200031d565b9392505050565b60008060008060008060c0878903121562000501578182fd5b6200050c876200031d565b9550602087013567ffffffffffffffff8082111562000529578384fd5b620005378a838b016200033a565b965060408901359150808211156200054d578384fd5b6200055b8a838b016200033a565b9550606089013591508082111562000571578384fd5b6200057f8a838b016200044d565b94506200058f60808a01620004b1565b935060a0890135915080821115620005a5578283fd5b50620005b489828a01620003ba565b9150509295509295509295565b6000815180845260208085019450808401835b83811015620005fb5781516001600160a01b031687529582019590820190600101620005d4565b509495945050505050565b6000815180845260208085019450808401835b83811015620005fb5781518051885283015161ffff16838801526040909601959082019060010162000619565b6001600160a01b038816815260e060208083018290526000916200066d9084018a620005c1565b838103604085015262000681818a620005c1565b84810360608601528851808252838a01925090830190845b81811015620006b75783518352928401929184019160010162000699565b505061ffff8816608086015284810360a0860152620006d7818862000606565b9350505050620006f260c08301846001600160a01b03169052565b98975050505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6040805190810167ffffffffffffffff81118282101715620007595762000759620007ba565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156200078b576200078b620007ba565b604052919050565b600067ffffffffffffffff821115620007b057620007b0620007ba565b5060051b60200190565b634e487b7160e01b600052604160045260246000fdfe60806040523480156200001157600080fd5b506040516200357f3803806200357f8339810160408190526200003491620009ed565b84848051825114620000a85760405162461bcd60e51b815260206004820152603260248201527f5061796d656e7453706c69747465723a2070617965657320616e6420736861726044820152710cae640d8cadccee8d040dad2e6dac2e8c6d60731b60648201526084015b60405180910390fd5b6000825111620000fb5760405162461bcd60e51b815260206004820152601a60248201527f5061796d656e7453706c69747465723a206e6f2070617965657300000000000060448201526064016200009f565b60005b82518110156200017f576200016a8382815181106200012d57634e487b7160e01b600052603260045260246000fd5b60200260200101518383815181106200015657634e487b7160e01b600052603260045260246000fd5b6020026020010151620004d260201b60201c565b80620001768162000b79565b915050620000fe565b50505060648361ffff161115620001a957604051631fd655cd60e11b815260040160405180910390fd5b6009805462ffff00191661010061ffff861602179055815160018114156200026757600083600081518110620001ef57634e487b7160e01b600052603260045260246000fd5b602002602001015190506200020a81620006be60201b60201c565b600a805460018101825560009190915281516000805160206200353f8339815191526002909202918201556020909101516000805160206200351f833981519152909101805461ffff191661ffff90921691909117905562000419565b600181111562000419576040805180820190915260008082526020820152604080518082019091526000808252602082015284600081518110620002bb57634e487b7160e01b600052603260045260246000fd5b60200260200101519050620002d681620006be60201b60201c565b600a80546001808201835560009290925282516000805160206200353f83398151915260029092029182015560208301516000805160206200351f833981519152909101805461ffff191661ffff9092169190911790555b8381101562000415578192508581815181106200035b57634e487b7160e01b600052603260045260246000fd5b60200260200101519150816000015183600001511015806200038d5750816020015161ffff16836020015161ffff1611155b15620003ac57604051638ebf7c8f60e01b815260040160405180910390fd5b620003b782620006be565b600a80546001808201835560009290925283516000805160206200353f83398151915260029092029182015560208401516000805160206200351f833981519152909101805461ffff191661ffff909216919091179055016200032e565b5050505b62000426600089620006ec565b620004416000805160206200355f83398151915289620006ec565b865160005b81811015620004a157620004986000805160206200355f8339815191528a83815181106200048457634e487b7160e01b600052603260045260246000fd5b6020026020010151620006ec60201b60201c565b60010162000446565b5050600d80546001600160a01b0319166001600160a01b0393909316929092179091555062000bc395505050505050565b6001600160a01b0382166200053f5760405162461bcd60e51b815260206004820152602c60248201527f5061796d656e7453706c69747465723a206163636f756e74206973207468652060448201526b7a65726f206164647265737360a01b60648201526084016200009f565b60008111620005915760405162461bcd60e51b815260206004820152601d60248201527f5061796d656e7453706c69747465723a2073686172657320617265203000000060448201526064016200009f565b6001600160a01b038216600090815260026020526040902054156200060d5760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e7420616c726561647960448201526a206861732073686172657360a81b60648201526084016200009f565b60048054600181019091557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319166001600160a01b0384169081179091556000908152600260205260408120829055546200067590829062000b5e565b600055604080516001600160a01b0384168152602081018390527f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac910160405180910390a15050565b6064816020015161ffff161115620006e9576040516324999a8f60e21b815260040160405180910390fd5b50565b6200070382826200072f60201b6200124b1760201c565b60008281526008602090815260409091206200072a918390620012d1620007d4821b17901c565b505050565b60008281526007602090815260408083206001600160a01b038516845290915290205460ff16620007d05760008281526007602090815260408083206001600160a01b03851684529091529020805460ff191660011790556200078f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000620007eb836001600160a01b038416620007f4565b90505b92915050565b60008181526001830160205260408120546200083d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620007ee565b506000620007ee565b80516001600160a01b03811681146200085e57600080fd5b919050565b600082601f83011262000874578081fd5b815160206200088d620008878362000b38565b62000b05565b80838252828201915082860187848660051b8901011115620008ad578586fd5b855b85811015620008d657620008c38262000846565b84529284019290840190600101620008af565b5090979650505050505050565b600082601f830112620008f4578081fd5b8151602062000907620008878362000b38565b80838252828201915082860187848660061b890101111562000927578586fd5b855b85811015620008d657604080838b03121562000943578788fd5b6200094d62000ada565b835181526200095e878501620009da565b81880152855293850193919091019060010162000929565b600082601f83011262000987578081fd5b815160206200099a620008878362000b38565b80838252828201915082860187848660051b8901011115620009ba578586fd5b855b85811015620008d657815184529284019290840190600101620009bc565b805161ffff811681146200085e57600080fd5b600080600080600080600060e0888a03121562000a08578283fd5b62000a138862000846565b60208901519097506001600160401b038082111562000a30578485fd5b62000a3e8b838c0162000863565b975060408a015191508082111562000a54578485fd5b62000a628b838c0162000863565b965060608a015191508082111562000a78578485fd5b62000a868b838c0162000976565b955062000a9660808b01620009da565b945060a08a015191508082111562000aac578384fd5b5062000abb8a828b01620008e3565b92505062000acc60c0890162000846565b905092959891949750929550565b604080519081016001600160401b038111828210171562000aff5762000aff62000bad565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000b305762000b3062000bad565b604052919050565b60006001600160401b0382111562000b545762000b5462000bad565b5060051b60200190565b6000821982111562000b745762000b7462000b97565b500190565b600060001982141562000b905762000b9062000b97565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b61294c8062000bd36000396000f3fe6080604052600436106101bb5760003560e01c80638b83209b116100ec578063ca15c8731161008a578063d547741f11610064578063d547741f14610596578063d79779b2146105b6578063e33b7de3146105ec578063fab480f41461060157600080fd5b8063ca15c87314610520578063ce7c2ac214610540578063d2fd101b1461057657600080fd5b80639852595c116100c65780639852595c146104ad578063a217fddf146104e3578063bc157ac1146104f8578063c163de3d1461050b57600080fd5b80638b83209b146104355780639010d07c1461046d57806391d148541461048d57600080fd5b806336568abe1161015957806340e58ee51161013357806340e58ee5146103b957806348b75044146103d9578063597e1fb5146103f9578063700d4aec1461041357600080fd5b806336568abe1461033e5780633a98ef391461035e578063406072a91461037357600080fd5b80631916558711610195578063191655871461029e578063245a91a3146102c0578063248a9ca3146102e05780632f2ff15d1461031e57600080fd5b806301ffc9a714610209578063085c967f1461023e578063129f33171461026b57600080fd5b36610204577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be77033604080516001600160a01b0390921682523460208301520160405180910390a1005b600080fd5b34801561021557600080fd5b50610229610224366004612498565b610621565b60405190151581526020015b60405180910390f35b34801561024a57600080fd5b5061025e610259366004612430565b61064c565b604051610235919061269f565b34801561027757600080fd5b5060095461028b90610100900461ffff1681565b60405161ffff9091168152602001610235565b3480156102aa57600080fd5b506102be6102b93660046123d8565b6106d4565b005b3480156102cc57600080fd5b506102296102db366004612430565b61080b565b3480156102ec57600080fd5b506103106102fb366004612430565b60009081526007602052604090206001015490565b604051908152602001610235565b34801561032a57600080fd5b506102be610339366004612448565b610830565b34801561034a57600080fd5b506102be610359366004612448565b61085a565b34801561036a57600080fd5b50600054610310565b34801561037f57600080fd5b5061031061038e3660046124c0565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205490565b3480156103c557600080fd5b506102be6103d4366004612430565b6108d8565b3480156103e557600080fd5b506102be6103f43660046124c0565b61097e565b34801561040557600080fd5b506009546102299060ff1681565b34801561041f57600080fd5b50610428610b66565b60405161023591906126f7565b34801561044157600080fd5b50610455610450366004612430565b610c90565b6040516001600160a01b039091168152602001610235565b34801561047957600080fd5b50610455610488366004612477565b610cce565b34801561049957600080fd5b506102296104a8366004612448565b610ced565b3480156104b957600080fd5b506103106104c83660046123d8565b6001600160a01b031660009081526003602052604090205490565b3480156104ef57600080fd5b50610310600081565b6102be610506366004612505565b610d18565b34801561051757600080fd5b506102be610f1b565b34801561052c57600080fd5b5061031061053b366004612430565b610fbe565b34801561054c57600080fd5b5061031061055b3660046123d8565b6001600160a01b031660009081526002602052604090205490565b34801561058257600080fd5b506102be61059136600461253c565b610fd5565b3480156105a257600080fd5b506102be6105b1366004612448565b611096565b3480156105c257600080fd5b506103106105d13660046123d8565b6001600160a01b031660009081526005602052604090205490565b3480156105f857600080fd5b50600154610310565b34801561060d57600080fd5b506102be61061c36600461253c565b6110bb565b60006001600160e01b03198216635a05180f60e01b14806106465750610646826112e6565b92915050565b6060600c6000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156106c9576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101610681565b505050509050919050565b6001600160a01b0381166000908152600260205260409020546107125760405162461bcd60e51b815260040161070990612770565b60405180910390fd5b600061071d60015490565b6107279047612801565b90506000610754838361074f866001600160a01b031660009081526003602052604090205490565b61131b565b9050806107735760405162461bcd60e51b8152600401610709906127b6565b6001600160a01b0383166000908152600360205260408120805483929061079b908490612801565b9250508190555080600160008282546107b49190612801565b909155506107c49050838261135e565b604080516001600160a01b0385168152602081018390527fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b056910160405180910390a1505050565b60095460009060ff16806106465750506000908152600b602052604090205460ff1690565b60008281526007602052604090206001015461084b81611477565b6108558383611484565b505050565b6001600160a01b03811633146108ca5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610709565b6108d482826114a6565b5050565b6109027fb012ba8c7281edbf1d476d7a0eccd3cb202b439a7f0a8f6c574f02e5df5c10b133610ced565b61091f57604051634ca8886760e01b815260040160405180910390fd5b6000818152600b6020526040808220805460ff19166001179055517f3fdad7f8cdfcd1b65d4d09d35f3a990abd6d5cf186ba129cfb4abbf332cf961b91610973918491909182521515602082015260400190565b60405180910390a150565b6001600160a01b0381166000908152600260205260409020546109b35760405162461bcd60e51b815260040161070990612770565b6001600160a01b0382166000908152600560205260408120546040516370a0823160e01b81523060048201526001600160a01b038516906370a082319060240160206040518083038186803b158015610a0b57600080fd5b505afa158015610a1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4391906124ed565b610a4d9190612801565b90506000610a86838361074f87876001600160a01b03918216600090815260066020908152604080832093909416825291909152205490565b905080610aa55760405162461bcd60e51b8152600401610709906127b6565b6001600160a01b03808516600090815260066020908152604080832093871683529290529081208054839290610adc908490612801565b90915550506001600160a01b03841660009081526005602052604081208054839290610b09908490612801565b90915550610b1a90508484836114c8565b604080516001600160a01b038581168252602082018490528616917f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a910160405180910390a250505050565b600a5460609060008167ffffffffffffffff811115610b9557634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610bda57816020015b6040805180820190915260008082526020820152815260200190600190039081610bb35790505b50905060005b82811015610c89576000600a8281548110610c0b57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805180820182526002909302909101805483526001015461ffff9081168385019081528251808401909352835183525116928101929092528451909250849084908110610c7557634e487b7160e01b600052603260045260246000fd5b602090810291909101015250600101610be0565b5092915050565b600060048281548110610cb357634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031692915050565b6000828152600860205260408120610ce6908361151a565b9392505050565b60009182526007602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60095460ff1615610d3c57604051638819799d60e01b815260040160405180910390fd5b3481610d5b5760405163162908e360e11b815260040160405180910390fd5b6000848152600b602052604090205460ff1615610d8b5760405163b8f8d1f760e01b815260040160405180910390fd5b6001600160a01b038316158015908190610da457508115155b80610db8575080158015610db85750828214155b15610dd65760405163fe9ba5cd60e01b815260040160405180910390fd5b338115610e67576040516323b872dd60e01b81526001600160a01b038281166004830152306024830152604482018690528616906323b872dd90606401602060405180830381600087803b158015610e2d57600080fd5b505af1158015610e41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e659190612410565b505b6000868152600c60209081526040808320815180830183526001600160a01b038a81168083528286018b8152845460018082018755958952978790209351600290980290930180546001600160a01b0319169783169790971787559151959092019490945581519085168152918201899052810191909152606081018590527fde50620a8362ed2d89afd08b856fe6db50ad03c096d5f6e10a7ce71ee5359de39060800160405180910390a1505050505050565b610f457fb012ba8c7281edbf1d476d7a0eccd3cb202b439a7f0a8f6c574f02e5df5c10b133610ced565b610f6257604051634ca8886760e01b815260040160405180910390fd5b60095460ff1615610f8657604051638819799d60e01b815260040160405180910390fd5b6009805460ff191660011790556040517fc67401958d8f4f70d6e5fb87c0190c6f0df5a05a8926d934f81c7491e7402f4790600090a1565b600081815260086020526040812061064690611526565b33610fdf8461080b565b610ffc576040516332d6d8f560e21b815260040160405180910390fd5b61104e8185600960019054906101000a900461ffff1686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061153092505050565b604080516001600160a01b0383168152602081018690527fe6cdcbc54159ba58a71f3aae716b81d82506c6fc76a7383e605e7e365d834425910160405180910390a150505050565b6000828152600760205260409020600101546110b181611477565b61085583836114a6565b60095460ff16156110df57604051638819799d60e01b815260040160405180910390fd5b6000838152600b602052604090205460ff161561110f5760405163b8f8d1f760e01b815260040160405180910390fd5b600a54600090815b818110156111a9576000600a826001600a80549050611136919061284c565b611140919061284c565b8154811061115e57634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051808201909152600290920201805480835260019091015461ffff169282019290925291504210156111a057806020015193505b50600101611117565b506000858152600b60205260409020805460ff1916600117905561120b6111cd3390565b868487878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061153092505050565b60408051868152600160208201527f3fdad7f8cdfcd1b65d4d09d35f3a990abd6d5cf186ba129cfb4abbf332cf961b910160405180910390a15050505050565b6112558282610ced565b6108d45760008281526007602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561128d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610ce6836001600160a01b0384166116db565b60006001600160e01b03198216637965db0b60e01b148061064657506301ffc9a760e01b6001600160e01b0319831614610646565b600080546001600160a01b038516825260026020526040822054839190611342908661282d565b61134c9190612819565b611356919061284c565b949350505050565b804710156113ae5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610709565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146113fb576040519150601f19603f3d011682016040523d82523d6000602084013e611400565b606091505b50509050806108555760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610709565b611481813361172a565b50565b61148e828261124b565b600082815260086020526040902061085590826112d1565b6114b0828261178e565b600082815260086020526040902061085590826117f5565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261085590849061180a565b6000610ce683836118dc565b6000610646825490565b61153a8382611914565b61ffff8216611548576116d5565b60006115538461064c565b90508051600014156115785760405163d1dafa8560e01b815260040160405180910390fd5b6000848152600c6020526040812061158f91612392565b805160005b818161ffff1610156116d1576000838261ffff16815181106115c657634e487b7160e01b600052603260045260246000fd5b60200260200101519050600060648761ffff1683602001516115e8919061282d565b6115f29190612819565b82519091506001600160a01b0316611640576040516001600160a01b038a169082156108fc029083906000818181858888f1935050505015801561163a573d6000803e3d6000fd5b506116c7565b815160405163a9059cbb60e01b81526001600160a01b038b81166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b15801561168d57600080fd5b505af11580156116a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c59190612410565b505b5050600101611594565b5050505b50505050565b600081815260018301602052604081205461172257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610646565b506000610646565b6117348282610ced565b6108d45761174c816001600160a01b03166014611a0a565b611757836020611a0a565b60405160200161176892919061262a565b60408051601f198184030181529082905262461bcd60e51b82526107099160040161273d565b6117988282610ced565b156108d45760008281526007602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610ce6836001600160a01b038416611bec565b600061185f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611d099092919063ffffffff16565b805190915015610855578080602001905181019061187d9190612410565b6108555760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610709565b600082600001828154811061190157634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b600061194a826119448560405160200161193091815260200190565b604051602081830303815290604052611d18565b90611d53565b90506000600d60009054906101000a90046001600160a01b03166001600160a01b0316637ac3c02f6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561199e57600080fd5b505af11580156119b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d691906123f4565b9050806001600160a01b0316826001600160a01b0316146116d557604051632057875960e21b815260040160405180910390fd5b60606000611a1983600261282d565b611a24906002612801565b67ffffffffffffffff811115611a4a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611a74576020820181803683370190505b509050600360fc1b81600081518110611a9d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611ada57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000611afe84600261282d565b611b09906001612801565b90505b6001811115611b9d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611b4b57634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110611b6f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93611b968161288f565b9050611b0c565b508315610ce65760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610709565b60008181526001830160205260408120548015611cff576000611c1060018361284c565b8554909150600090611c249060019061284c565b9050818114611ca5576000866000018281548110611c5257634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110611c8357634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611cc457634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610646565b6000915050610646565b60606113568484600085611d77565b6000611d248251611ea8565b82604051602001611d369291906125cf565b604051602081830303815290604052805190602001209050919050565b6000806000611d628585611fc2565b91509150611d6f81612032565b509392505050565b606082471015611dd85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610709565b6001600160a01b0385163b611e2f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610709565b600080866001600160a01b03168587604051611e4b91906125b3565b60006040518083038185875af1925050503d8060008114611e88576040519150601f19603f3d011682016040523d82523d6000602084013e611e8d565b606091505b5091509150611e9d828286612233565b979650505050505050565b606081611ecc5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611ef65780611ee0816128a6565b9150611eef9050600a83612819565b9150611ed0565b60008167ffffffffffffffff811115611f1f57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611f49576020820181803683370190505b5090505b841561135657611f5e60018361284c565b9150611f6b600a866128c1565b611f76906030612801565b60f81b818381518110611f9957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611fbb600a86612819565b9450611f4d565b600080825160411415611ff95760208301516040840151606085015160001a611fed8782858561226c565b9450945050505061202b565b8251604014156120235760208301516040840151612018868383612359565b93509350505061202b565b506000905060025b9250929050565b600081600481111561205457634e487b7160e01b600052602160045260246000fd5b141561205d5750565b600181600481111561207f57634e487b7160e01b600052602160045260246000fd5b14156120cd5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610709565b60028160048111156120ef57634e487b7160e01b600052602160045260246000fd5b141561213d5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610709565b600381600481111561215f57634e487b7160e01b600052602160045260246000fd5b14156121b85760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610709565b60048160048111156121da57634e487b7160e01b600052602160045260246000fd5b14156114815760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610709565b60608315612242575081610ce6565b8251156122525782518084602001fd5b8160405162461bcd60e51b8152600401610709919061273d565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156122a35750600090506003612350565b8460ff16601b141580156122bb57508460ff16601c14155b156122cc5750600090506004612350565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612320573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661234957600060019250925050612350565b9150600090505b94509492505050565b6000806001600160ff1b0383168161237660ff86901c601b612801565b90506123848782888561226c565b935093505050935093915050565b508054600082556002029060005260206000209081019061148191905b808211156123d45780546001600160a01b0319168155600060018201556002016123af565b5090565b6000602082840312156123e9578081fd5b8135610ce681612901565b600060208284031215612405578081fd5b8151610ce681612901565b600060208284031215612421578081fd5b81518015158114610ce6578182fd5b600060208284031215612441578081fd5b5035919050565b6000806040838503121561245a578081fd5b82359150602083013561246c81612901565b809150509250929050565b60008060408385031215612489578182fd5b50508035926020909101359150565b6000602082840312156124a9578081fd5b81356001600160e01b031981168114610ce6578182fd5b600080604083850312156124d2578182fd5b82356124dd81612901565b9150602083013561246c81612901565b6000602082840312156124fe578081fd5b5051919050565b600080600060608486031215612519578081fd5b83359250602084013561252b81612901565b929592945050506040919091013590565b600080600060408486031215612550578283fd5b83359250602084013567ffffffffffffffff8082111561256e578384fd5b818601915086601f830112612581578384fd5b81358181111561258f578485fd5b8760208285010111156125a0578485fd5b6020830194508093505050509250925092565b600082516125c5818460208701612863565b9190910192915050565b7f19457468657265756d205369676e6564204d6573736167653a0a00000000000081526000835161260781601a850160208801612863565b83519083019061261e81601a840160208801612863565b01601a01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612662816017850160208801612863565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612693816028840160208801612863565b01602801949350505050565b602080825282518282018190526000919060409081850190868401855b828110156126ea57815180516001600160a01b031685528601518685015292840192908501906001016126bc565b5091979650505050505050565b602080825282518282018190526000919060409081850190868401855b828110156126ea5781518051855286015161ffff16868501529284019290850190600101612714565b602081526000825180602084015261275c816040850160208701612863565b601f01601f19169190910160400192915050565b60208082526026908201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060408201526573686172657360d01b606082015260800190565b6020808252602b908201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060408201526a191d59481c185e5b595b9d60aa1b606082015260800190565b60008219821115612814576128146128d5565b500190565b600082612828576128286128eb565b500490565b6000816000190483118215151615612847576128476128d5565b500290565b60008282101561285e5761285e6128d5565b500390565b60005b8381101561287e578181015183820152602001612866565b838111156116d55750506000910152565b60008161289e5761289e6128d5565b506000190190565b60006000198214156128ba576128ba6128d5565b5060010190565b6000826128d0576128d06128eb565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6001600160a01b038116811461148157600080fdfea2646970667358221220a04dc1aa2052fce0e63a21a7a6576b1cdb62c9edcaf4b5d16b613df30f73a35364736f6c63430008040033c65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a9c65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8b012ba8c7281edbf1d476d7a0eccd3cb202b439a7f0a8f6c574f02e5df5c10b1a2646970667358221220d9dccfacad6ec367e3319e819d959fff53b6435068a0d1e33838e495a758e67764736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 550,
        "contract": "contracts/escrow/LemonadeEscrowFactoryV1.sol:LemonadeEscrowFactoryV1",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3093,
        "contract": "contracts/escrow/LemonadeEscrowFactoryV1.sol:LemonadeEscrowFactoryV1",
        "label": "_signer",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}