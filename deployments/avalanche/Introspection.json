{
  "address": "0x7254e06afb533964b389Be742524FA696a290C81",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes4[]",
          "name": "interfaceIds",
          "type": "bytes4[]"
        }
      ],
      "name": "getSupportedInterfaces",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x92d3c3d3278d7607ab54f514ace0484a57369f35c479d33e8596298b2559a970",
  "receipt": {
    "to": null,
    "from": "0x951292004e8a18955Cb1095CB72Ca6B01d68336E",
    "contractAddress": "0x7254e06afb533964b389Be742524FA696a290C81",
    "transactionIndex": 8,
    "gasUsed": "330148",
    "logsBloom": "0x
    "blockHash": "0xe2c58bc855bb00b0702307d0e3de52071d51b179ff16626f8e897d7a8ecf2991",
    "transactionHash": "0x92d3c3d3278d7607ab54f514ace0484a57369f35c479d33e8596298b2559a970",
    "logs": [],
    "blockNumber": 29534734,
    "cumulativeGasUsed": "3218592",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8070e3783bf0d9853d1e72aacc5695cb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"interfaceIds\",\"type\":\"bytes4[]\"}],\"name\":\"getSupportedInterfaces\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Introspection.sol\":\"Introspection\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\",\"keccak256\":\"0xf7291d7213336b00ee7edbf7cd5034778dd7b0bda2a7489e664f1e5cacc6c24e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Introspection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\n\\ncontract Introspection {\\n    using ERC165Checker for address;\\n\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) public view returns (bool[] memory) {\\n        require(account.code.length > 0, \\\"Introspection: account not a contract\\\");\\n\\n        return account.getSupportedInterfaces(interfaceIds);\\n    }\\n}\\n\",\"keccak256\":\"0xa0032c78e6ac2446b60a975f8e81357cca2fa7b505f1e8aed41b1e8a88329b43\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610502806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806377e6b4cc14610030575b600080fd5b61004361003e366004610309565b610059565b6040516100509190610449565b60405180910390f35b60606000836001600160a01b03163b116100c75760405162461bcd60e51b815260206004820152602560248201527f496e74726f7370656374696f6e3a206163636f756e74206e6f74206120636f6e6044820152641d1c9858dd60da1b606482015260840160405180910390fd5b6100da6001600160a01b038416836100e3565b90505b92915050565b60606000825167ffffffffffffffff81111561010f57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610138578160200160208202803683370190505b509050610144846101d0565b156100da5760005b83518110156101c8576101868585838151811061017957634e487b7160e01b600052603260045260246000fd5b6020026020010151610203565b8282815181106101a657634e487b7160e01b600052603260045260246000fd5b91151560209283029190910190910152806101c08161048f565b91505061014c565b509392505050565b60006101e3826301ffc9a760e01b610203565b80156100dd57506101fc826001600160e01b0319610203565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b038716906175309061026a908690610410565b6000604051808303818686fa925050503d80600081146102a6576040519150601f19603f3d011682016040523d82523d6000602084013e6102ab565b606091505b50915091506020815110156102c657600093505050506100dd565b8180156102e25750808060200190518101906102e291906103f0565b9695505050505050565b80356001600160e01b03198116811461030457600080fd5b919050565b6000806040838503121561031b578182fd5b82356001600160a01b0381168114610331578283fd5b915060208381013567ffffffffffffffff8082111561034e578384fd5b818601915086601f830112610361578384fd5b813581811115610373576103736104b6565b8060051b604051601f19603f83011681018181108582111715610398576103986104b6565b604052828152858101935084860182860187018b10156103b6578788fd5b8795505b838610156103df576103cb816102ec565b8552600195909501949386019386016103ba565b508096505050505050509250929050565b600060208284031215610401578081fd5b815180151581146100da578182fd5b60008251815b818110156104305760208186018101518583015201610416565b8181111561043e5782828501525b509190910192915050565b6020808252825182820181905260009190848201906040850190845b81811015610483578351151583529284019291840191600101610465565b50909695505050505050565b60006000198214156104af57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220f4213b09b1012cf0ab011d475d5d790ec726c0fa3585b1a3e69f985aa4fb38ee64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806377e6b4cc14610030575b600080fd5b61004361003e366004610309565b610059565b6040516100509190610449565b60405180910390f35b60606000836001600160a01b03163b116100c75760405162461bcd60e51b815260206004820152602560248201527f496e74726f7370656374696f6e3a206163636f756e74206e6f74206120636f6e6044820152641d1c9858dd60da1b606482015260840160405180910390fd5b6100da6001600160a01b038416836100e3565b90505b92915050565b60606000825167ffffffffffffffff81111561010f57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610138578160200160208202803683370190505b509050610144846101d0565b156100da5760005b83518110156101c8576101868585838151811061017957634e487b7160e01b600052603260045260246000fd5b6020026020010151610203565b8282815181106101a657634e487b7160e01b600052603260045260246000fd5b91151560209283029190910190910152806101c08161048f565b91505061014c565b509392505050565b60006101e3826301ffc9a760e01b610203565b80156100dd57506101fc826001600160e01b0319610203565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b038716906175309061026a908690610410565b6000604051808303818686fa925050503d80600081146102a6576040519150601f19603f3d011682016040523d82523d6000602084013e6102ab565b606091505b50915091506020815110156102c657600093505050506100dd565b8180156102e25750808060200190518101906102e291906103f0565b9695505050505050565b80356001600160e01b03198116811461030457600080fd5b919050565b6000806040838503121561031b578182fd5b82356001600160a01b0381168114610331578283fd5b915060208381013567ffffffffffffffff8082111561034e578384fd5b818601915086601f830112610361578384fd5b813581811115610373576103736104b6565b8060051b604051601f19603f83011681018181108582111715610398576103986104b6565b604052828152858101935084860182860187018b10156103b6578788fd5b8795505b838610156103df576103cb816102ec565b8552600195909501949386019386016103ba565b508096505050505050509250929050565b600060208284031215610401578081fd5b815180151581146100da578182fd5b60008251815b818110156104305760208186018101518583015201610416565b8181111561043e5782828501525b509190910192915050565b6020808252825182820181905260009190848201906040850190845b81811015610483578351151583529284019291840191600101610465565b50909695505050505050565b60006000198214156104af57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220f4213b09b1012cf0ab011d475d5d790ec726c0fa3585b1a3e69f985aa4fb38ee64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}